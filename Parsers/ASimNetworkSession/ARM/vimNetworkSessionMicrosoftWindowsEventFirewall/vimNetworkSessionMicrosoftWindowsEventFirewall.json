{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string"
    },
    "location": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimNetworkSessionMicrosoftWindowsEventFirewall",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Microsoft Windows Event Firewall Network Sessions",
            "category": "Security",
            "FunctionAlias": "vimNetworkSessionMicrosoftWindowsEventFirewall",
            "query": "// Data tables for mapping raw values into string\nlet LayerCodeTable = datatable (LayerCode:string,LayerName:string)[\n              '%%14596', 'IP Packet',\n              '%%14597', 'Transport',\n              '%%14598', 'Forward',\n              '%%14599', 'Stream',\n              '%%14600', 'Datagram Data',\n              '%%14601', 'ICMP Error',\n              '%%14602', 'MAC 802.3',\n              '%%14603', 'MAC Native',\n              '%%14604', 'vSwitch',\n              '%%14608', 'Resource Assignment',\n              '%%14609', 'Listen',\n              '%%14610', 'Receive/Accept',\n              '%%14611', 'Connect',\n              '%%14612', 'Flow Established',\n              '%%14614', 'Resource Release',\n              '%%14615', 'Endpoint Closure',\n              '%%14616', 'Connect Redirect',\n              '%%14617', 'Bind Redirect',\n              '%%14624', 'Stream Packet'];\nlet ProtocolTable = datatable (Protocol:int, NetworkProtocol: string)[\n              1, 'ICMP',\n              3, 'GGP',\n              6, 'TCP',\n              8, 'EGP',\n              12, 'PUP',\n              17, 'UDP',\n              20, 'HMP',\n              27, 'RDP',\n              46, 'RSVP',\n              47, 'PPTP data over GRE',\n              50, 'ESP',\n              51, 'AH',\n              66, 'RVD',\n              88, 'IGMP',\n              89, 'OSPF'];\nlet Directions = datatable (DirectionCode:string,NetworkDirection:string, isOutBound:bool)[\n            '%%14592', 'Inbound', false,\n            '%%14593', 'Outbound', true,\n            '%%14594', 'Forward',false,\n            '%%14595', 'Bidirectional', false,\n            '%%14609', 'Listen', false];\n///////////////////////////////////////////////////////\n// this query extract data fields from EventData column from SecurityEvent table\n///////////////////////////////////////////////////////\nlet WindowsFirewall_SecurityEvent=\n  (starttime:datetime=datetime(null)\n  , endtime:datetime=datetime(null)\n  , srcipaddr_has_any_prefix:dynamic=dynamic([])\n  , dstipaddr_has_any_prefix:dynamic=dynamic([])\n  , dstportnumber:int=int(null)\n  , url_has_any:dynamic=dynamic([])\n  , httpuseragent_has_any:dynamic=dynamic([])\n  , hostname_has_any:dynamic=dynamic([])\n  , dvcaction:dynamic=dynamic([])\n  , eventresult:string='*'\n  , disabled:bool=false\n    )\n    { \n    // Event IDs between (5151 .. 5159)\n    // will be extracting Event specific fields from 'EventData' field\n    let SecurityEvent_5152 = \n        SecurityEvent | where not(disabled)\n        | where EventID==5152\n        | extend EventResult =  \"Failure\"\n        // ***************  Prefilterring *****************************************************************\n        |where (isnull(starttime) or TimeGenerated>=starttime)\n          and  (isnull(endtime) or TimeGenerated<=endtime)\n          and  (isnull(dstportnumber) or EventData has tostring(dstportnumber) ) \n          and  (array_length(srcipaddr_has_any_prefix)==0 \n                or has_any_ipv4_prefix(EventData ,srcipaddr_has_any_prefix)\n              ) \n          and  (array_length(dstipaddr_has_any_prefix)==0 \n                or has_any_ipv4_prefix(EventData ,dstipaddr_has_any_prefix)\n              ) \n          and (array_length(dvcaction)==0 or (dvcaction=='Deny') ) \n          and (array_length(url_has_any)==0)\n          and (array_length(httpuseragent_has_any) ==0) // if filtering by ua - return nothing\n          and (array_length(hostname_has_any)==0 )\n          and (eventresult=='*' or eventresult=='Failure')\n        // *************** / Prefilterring *****************************************************************\n        | parse EventData with * '<Data Name=\"ProcessId\">'ProcessId:string'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"Application\">'Application'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"Direction\">'DirectionCode'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SourceAddress'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"SourcePort\">'SourcePort'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"DestAddress\">'DestAddress'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"DestPort\">'DestPort:int'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\n      ;\n    let SecurityEvent_5154_5155_5158_5159 =\n    SecurityEvent | where not(disabled)\n        | where EventID in (5154, 5155, 5158, 5159)\n        // ***************  Prefilterring *****************************************************************\n        |where (array_length(dstipaddr_has_any_prefix)==0 ) \n          and  (array_length(hostname_has_any)==0 ) \n          and  (isnull(dstportnumber) ) \n          and  (isnull(starttime) or TimeGenerated>=starttime)\n          and  (isnull(endtime) or TimeGenerated<=endtime)\n          and  (array_length(srcipaddr_has_any_prefix)==0 \n                or has_any_ipv4_prefix(EventData ,srcipaddr_has_any_prefix)\n              ) \n          and (array_length(dvcaction)==0 \n              or (dvcaction=='Allow' and EventID in  (5154,5158))  \n              or (dvcaction=='Deny'  and EventID !in (5154,5158))\n              ) \n          and (array_length(url_has_any)==0)\n          and (array_length(httpuseragent_has_any) ==0) // if filtering by ua - return nothing\n        | extend EventResult = iff(EventID in (5154, 5158), \"Success\", \"Failure\")\n        | extend (eventresult=='*' or EventResult==eventresult)\n        // *************** / Prefilterring *****************************************************************\n        | parse EventData with * '<Data Name=\"ProcessId\">'ProcessId:string'</Data>' \n                            '\\x0d\\x0a  <Data Name=\"Application\">'Application:string'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SourceAddress:string'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"SourcePort\">'SourcePort:int'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\n                            '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'*\n        | extend DirectionCode = \"%%14609\"\n        ;\n    let SecurityEvent_5156_5157 =\n        SecurityEvent | where not(disabled)\n        | where EventID in (5156, 5157)\n         | extend EventResult = iff(EventID == 5156, \"Success\", \"Failure\")\n        // ***************  Prefilterring *****************************************************************\n        | where (isnull(starttime) or TimeGenerated>=starttime)\n          and  (isnull(endtime) or TimeGenerated<=endtime)\n          and  (array_length(srcipaddr_has_any_prefix)==0 \n                or has_any_ipv4_prefix(EventData ,srcipaddr_has_any_prefix)\n              )\n          and  (array_length(dstipaddr_has_any_prefix)==0 \n                or has_any_ipv4_prefix(EventData ,dstipaddr_has_any_prefix)\n              )\n          and  (isnull(dstportnumber) or EventData has tostring(dstportnumber) ) \n          and (array_length(dvcaction)==0 \n              or (dvcaction=='Allow' and EventID == 5156)  \n              or (dvcaction=='Deny'  and EventID <> 5156)\n              )\n          and (array_length(url_has_any)==0 )\n          and (isnull(httpuseragent_has_any) )\n          and (array_length(hostname_has_any)==0 )\n          and (eventresult=='*' or EventResult==eventresult) \n        // *************** / Prefilterring *****************************************************************\n        | parse EventData with * '<Data Name=\"ProcessID\">'ProcessID:string'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Application\">'Application'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Direction\">'DirectionCode'</Data>'\n            '\\x0d\\x0a  <Data Name=\"SourceAddress\">'SourceAddress'</Data>'\n            '\\x0d\\x0a  <Data Name=\"SourcePort\">'SourcePort'</Data>'\n            '\\x0d\\x0a  <Data Name=\"DestAddress\">'DestAddress'</Data>'\n            '\\x0d\\x0a  <Data Name=\"DestPort\">'DestPort:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"Protocol\">'Protocol:int'</Data>'\n            '\\x0d\\x0a  <Data Name=\"FilterRTID\">'NetworkRuleNumber'</Data>'\n            '\\x0d\\x0a  <Data Name=\"LayerName\">'LayerCode'</Data>'\n            '\\x0d\\x0a  <Data Name=\"LayerRTID\">'LayerRTID'</Data>'\n            '\\x0d\\x0a  <Data Name=\"RemoteUserID\">'RemoteUserID'</Data>'\n            '\\x0d\\x0a  <Data Name=\"RemoteMachineID\">'RemoteMachineID'</Data>'*\n            | project-away EventData;\n    union SecurityEvent_5152, SecurityEvent_5156_5157, SecurityEvent_5154_5155_5158_5159\n    | lookup Directions on DirectionCode\n    | extend\n          SrcAppName = iff(isOutBound, Application, \"\"),\n          DstAppName = iff(not(isOutBound), Application, \"\"),\n          SrcIpAddr = iff(isOutBound, DestAddress, SourceAddress),\n          DstIpAddr = iff(not(isOutBound), SourceAddress, DestAddress),\n          SrcHostId = iff(isOutBound, RemoteMachineID, \"\"),\n          DstHostId = iff(not(isOutBound), RemoteMachineID, \"\"),\n          SrcPortNumber = iff(isOutBound, toint(DestPort), toint(SourcePort)),\n          DstPortNumber = iff(not(isOutBound), toint(SourcePort), toint(DestPort)),\n          SrcProcessId =  iff(isOutBound, tostring(ProcessId), \"\"),\n          DstProcessId =  iff(not(isOutBound), tostring(ProcessId), \"\"),\n          DstUserId = iff(isOutBound, RemoteUserID, \"\"),\n          SrcUserId = iff(not(isOutBound), RemoteUserID, \"\")\n      // *************** Postfilterring *****************************************************************\n        | where  (isnull(dstportnumber) or DestPort == dstportnumber ) \n            and  (array_length(srcipaddr_has_any_prefix)==0 \n                  or has_any_ipv4_prefix(SrcIpAddr ,srcipaddr_has_any_prefix)\n                ) \n            and (array_length(dstipaddr_has_any_prefix)==0 \n                  or has_any_ipv4_prefix(DstIpAddr,dstipaddr_has_any_prefix)\n                ) \n        // *************** / Postfilterring *****************************************************************\n    };\n//////////////////////////////////////////////////////\n// this query extract the data from WindowsEvent table\n//////////////////////////////////////////////////////\nlet WindowsFirewall_WindowsEvent=(starttime:datetime=datetime(null), endtime:datetime=datetime(null)\n, srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null)\n, url_has_any:dynamic=dynamic([]), httpuseragent_has_any:dynamic=dynamic([])\n, hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]),eventresult:string='*', disabled:bool=false\n ){   \n    WindowsEvent | where not(disabled)\n    | where EventID between (5150 .. 5159)\n    | extend EventResult = iff(EventID in (5154, 5156, 5158), \"Success\", \"Failure\")\n    // ***************  Prefilterring *****************************************************************\n    | where (isnull(starttime) or TimeGenerated>=starttime) \n            and (isnull(endtime) or TimeGenerated<=endtime) \n            and (isnull(dstportnumber) or EventData has tostring(dstportnumber)) \n            and (array_length(srcipaddr_has_any_prefix)==0 \n                    or has_any_ipv4_prefix(EventData,srcipaddr_has_any_prefix)\n                 ) \n            and (array_length(dstipaddr_has_any_prefix)==0 \n                    or has_any_ipv4_prefix(EventData,dstipaddr_has_any_prefix)\n                 ) \n            and (array_length(hostname_has_any)==0 ) \n            and (isnull(httpuseragent_has_any))\n            and (array_length(url_has_any)==0 )\n            and (array_length(dvcaction)==0  ) \n            and (eventresult=='*' or EventResult==eventresult)\n    // *************** Prefilterring *****************************************************************\n          | extend \n              EventSeverity=tostring(EventData.Severity),\n              LayerCode = tostring(EventData.LayerName),\n              NetworkRuleNumber = tostring(EventData.FilterRTID),\n              Protocol = toint(EventData.Protocol),\n              DirectionCode = iff(EventID in (5154, 5155, 5158, 5159), \"%%14609\",tostring(EventData.Direction))\n          | lookup Directions on DirectionCode \n          | extend  SrcAppName = iff(isOutBound, tostring(EventData.Application), \"\"),\n                    DstAppName = iff(not(isOutBound), tostring(EventData.Application), \"\"),\n                    SrcIpAddr = iff(isOutBound, tostring(EventData.DestAddress), tostring(EventData.SourceAddress)),\n                    DstIpAddr = iff(not(isOutBound), tostring(EventData.SourceAddress), tostring(EventData.DestAddress)),\n                    SrcHostId = iff(isOutBound, tostring(EventData.RemoteMachineID), \"\"),\n                    DstHostId = iff(not(isOutBound), tostring(EventData.RemoteMachineID), \"\"),\n                    SrcPortNumber = iff(isOutBound, toint(EventData.DestPort), toint(EventData.SourcePort)),\n                    DstPortNumber = iff(not(isOutBound), toint(EventData.SourcePort), toint(EventData.DestPort)),\n                    SrcProcessId =  iff(isOutBound, tostring(EventData.ProcessId), \"\"),\n                    DstProcessId =  iff(not(isOutBound), tostring(EventData.ProcessId), \"\"),\n                    DstUserId = iff(isOutBound, tostring(EventData.RemoteUserID), \"\"),\n                    SrcUserId = iff(not(isOutBound), tostring(EventData.RemoteUserID), \"\")\n          | project-away EventData\n        // *************** Postfilterring *****************************************************************\n        | where  (isnull(dstportnumber) or DstPortNumber == dstportnumber ) \n            and  (array_length(srcipaddr_has_any_prefix)==0 \n                  or has_any_ipv4_prefix(SrcIpAddr ,srcipaddr_has_any_prefix)\n                ) \n            and (array_length(dstipaddr_has_any_prefix)==0 \n                  or has_any_ipv4_prefix(DstIpAddr,dstipaddr_has_any_prefix)\n                ) \n        // *************** / Postfilterring *****************************************************************\n      };\n// Main query -> outputs both schemas as one normalized table\nunion isfuzzy=true\n  WindowsFirewall_SecurityEvent  (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, dstportnumber, url_has_any, httpuseragent_has_any, hostname_has_any, dvcaction, disabled)\n  , WindowsFirewall_WindowsEvent (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, dstportnumber, url_has_any, httpuseragent_has_any, hostname_has_any, dvcaction, disabled)\n    | extend \n            DvcAction = iff(EventID in (5154, 5156, 5158), \"Allow\", \"Deny\"),\n            DvcOs = 'Windows',\n            DstAppType = \"Process\",\n            DstUserType = \"SID\",\n            SrcAppType = \"Process\",\n            SrcUserType = \"SID\",\n            EventType = \"NetworkSession\",\n            EventSchema = \"NetworkSession\",\n            EventSchemaVersion=\"0.2.0\",\n            EventCount=toint(1),\n            EventVendor = \"Microsoft\",\n            EventProduct = \"WindowsFirewall\",\n            EventStartTime = TimeGenerated,\n            EventEndTime = TimeGenerated,\n            EventOriginalUid = EventOriginId,\n            EventSeverity = iff(EventID  in (5154, 5156, 5158), \"Informational\", \"Low\")\n    | project-rename DvcHostname = Computer\n    | lookup LayerCodeTable on LayerCode\n    | lookup ProtocolTable on Protocol\n    | project-away LayerCode, DirectionCode, Protocol",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), url_has_any:dynamic=dynamic([]), httpuseragent_has_any:dynamic=dynamic([]), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), disabled:bool=False"
          }
        }
      ]
    }
  ]
}