{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "title": "Enrich Incidents - ShadowByte Aria",
        "description": "This playbook updates the Incident with the brach details if an account has been compromised.",
        "mainSteps": [ "1. Fetch the breach information from ShadowByte Aria", "2. Enrich the incident with breach information from ShadowByte Aria" ],
        "prerequisites": [
            "1. ShadowByte Aria Custom Connector needs to be deployed and configured prior to the deployment of this playbook under the same resource group."
        ],
        "prerequisitesDeployTemplateFile": "../ShadowByte_Custom_Connector/azuredeploy.json",
        "lastUpdateTime": "2021-11-26T00:00:00.000Z",
        "tags": [ "Enrichment" ],
        "support": {
            "tier": "community"
        },
        "author": {
            "name": "ShadowByte"
        }
    },
    "parameters": {
        "PlaybookName": {
            "defaultValue": "shadowbyte-aria-enrich-alerts",
            "type": "String"
        },
        "ShadowByteAriaConnectorName": {
            "defaultValue": "ShadowByteAriaConnector",
            "type": "String"
        }
    },
    "variables": {
        "AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "ShadowByteAriaConnectionName": "[concat('shadowbyteariaconnector-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('ShadowByteAriaConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('ShadowByteAriaConnectorName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureSentinelConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('AzureSentinelConnectionName')]",
                "customParameterValues": {},
                "parameterValueType": "alternative",
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('ShadowByteAriaConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
            ],
            "tags": {
                "LogicAppsCategory": "security",
                "hidden-SentinelTemplateName": "EnrichIncidentsShadowByteAria",
                "hidden-SentinelTemplateVersion": "1.0"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "When_Azure_Sentinel_incident_creation_rule_was_triggered": {
                            "type": "ApiConnectionWebhook",
                            "inputs": {
                                "body": {
                                    "callback_url": "@{listCallbackUrl()}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path": "/incident-creation"
                            }
                        }
                    },
                    "actions": {
                        "Add_comment_to_incident_(V3)": {
                            "runAfter": {
                                "Compose": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "incidentArmId": "@triggerBody()?['object']?['id']",
                                    "message": "<p>The following breaches were found to be associated with the affected accounts:<br>\n@{outputs('Compose')}</p>"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/Incidents/Comment"
                            }
                        },
                        "Compose": {
                            "runAfter": {
                                "For_each": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@variables('Breaches')"
                        },
                        "Entities_-_Get_Accounts": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/entities/account"
                            }
                        },
                        "For_each": {
                            "foreach": "@body('Entities_-_Get_Accounts')?['Accounts']",
                            "actions": {
                                "If_the_Account_Name_is_not_an_empty_string": {
                                    "actions": {
                                        "Breach_Search": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['ShadowByteAriaConnector']['connectionId']"
                                                    }
                                                },
                                                "method": "get",
                                                "path": "/v2/breach/search",
                                                "queries": {
                                                    "fuzzySearch": false,
                                                    "length": 1000,
                                                    "marketingData": false,
                                                    "search": "@items('For_each')?['Name']",
                                                    "searchType": "all",
                                                    "sortBy": "breach",
                                                    "sortType": "asc",
                                                    "start": 0
                                                }
                                            }
                                        },
                                        "If_the_request_returned_any_results": {
                                            "actions": {
                                                "Append_to_string_variable": {
                                                    "runAfter": {
                                                        "Create_HTML_table": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "AppendToStringVariable",
                                                    "inputs": {
                                                        "name": "Breaches",
                                                        "value": "@body('Create_HTML_table')"
                                                    }
                                                },
                                                "Create_HTML_table": {
                                                    "runAfter": {},
                                                    "type": "Table",
                                                    "inputs": {
                                                        "format": "HTML",
                                                        "from": "@body('Breach_Search')?['data']"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Breach_Search": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@body('Breach_Search')?['success']",
                                                            true
                                                        ]
                                                    },
                                                    {
                                                        "greater": [
                                                            "@body('Breach_Search')?['pagination']?['count']",
                                                            0
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(items('For_each')?['Name'])",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_Breaches": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Initialize_Breaches": {
                            "runAfter": {
                                "Entities_-_Get_Accounts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Breaches",
                                        "type": "string"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "ShadowByteAriaConnector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('ShadowByteAriaConnectionName'))]",
                                "connectionName": "[variables('ShadowByteAriaConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/customApis/', parameters('ShadowByteAriaConnectorName'))]"
                            },
                            "azuresentinel": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                                "connectionName": "[variables('AzureSentinelConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    ]
}