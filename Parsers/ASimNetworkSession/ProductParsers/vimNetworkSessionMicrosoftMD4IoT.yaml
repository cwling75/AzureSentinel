Parser:
  Title: ASIM Network Sessions Parser for Microsoft Defender for IoT - Endpoint
  Version: '0.1'
  LastUpdated: Sep 12, 2021
Product:
  Name: Microsoft Defender for IoT - Endpoint
Normalization:
  Schema: NetworkSession
  Version: '0.2.0'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/AzSentinelNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AzSentinelNormalization
Description: |
  ASIM Azure Defender for IoT Network Sessions Parser.
ParserName: vimNetworkSessionMD4IoT
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: "'*'"
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let DirectionNetworkEvents =
    SecurityIoTRawEvent | where not(disabled)
    // ***************  Prefilterring *****************************************************************
    |where 
        (eventresult=='*' or eventresult=='Success')
        and (array_length(url_has_any)==0)
        and (array_length(hostname_has_any)==0) 
        and (array_length(httpuseragent_has_any) ==0) // if filtering by ua - return nothing
        and (array_length(dvcaction) ==0  )     /// if filtered by action return nothing
        and (isnull(starttime) or TimeGenerated>=starttime) 
        and (isnull(endtime) or TimeGenerated<=endtime) 
        and (isnull(dstportnumber) or dstportnumber == LocalPort or dstportnumber == RemotePort) 
        and (array_length(srcipaddr_has_any_prefix)==0 
             or has_any_ipv4_prefix(RemoteAddress,srcipaddr_has_any_prefix)
             or has_any_ipv4_prefix(LocalAddress ,srcipaddr_has_any_prefix)
            ) 
        and (array_length(dstipaddr_has_any_prefix)==0 
             or has_any_ipv4_prefix(RemoteAddress,dstipaddr_has_any_prefix)
             or has_any_ipv4_prefix(LocalAddress ,dstipaddr_has_any_prefix)
            ) 
    // *************** Prefilterring *****************************************************************
    | where RawEventName == "NetworkActivity"
    | parse EventDetails with * ',"LocalPort":' LocalPort:int ',"RemotePort":' RemotePort:int ',' *
    | extend outbound = LocalPort > RemotePort
    ;
    let parser = (T: (EventDetails: string)) {
      T 
      | parse EventDetails with 
        '{"LocalAddress":"' LocalAddress:string '",'
        '"RemoteAddress":"' RemoteAddress:string '",'
        *
        '"BytesIn":' BytesIn:int ','
        '"BytesOut":' BytesOut:int ','
        '"Protocol":"' Protocol:string '",'
        '"ProcessId":' ProcessId:string ','
        '"UserId":' UserId:string ','
        '"ApplicationProtocol":"' ApplicationProtocol:string '",'
        * // '"AzureResourceId":"' AzureResourceId:string '",'
        '"DeviceId":"' DeviceId:string '",'
        '"MessageSource":"' MessageSource:string '",'
        '"OriginalEventId":"' OriginalEventId:string '",'
        '"TimestampUTC":"' TimestampUTC:datetime '",'
        *
    }
    ; 
    let OutboundNetworkEvents = 
      DirectionNetworkEvents
      | where outbound
      // ***************  Postfilterring *****************************************************************
      | where (array_length(dstipaddr_has_any_prefix)==0 or RemoteAddress==dstipaddr_has_any_prefix) and
              (array_length(srcipaddr_has_any_prefix)==0 or LocalAddress ==srcipaddr_has_any_prefix) and
              (isnull(dstportnumber) or dstportnumber==RemotePort)
      // ***************  Postfilterring *****************************************************************
      | invoke parser ()
      | project-rename
        SrcBytes = BytesOut,
        DstBytes = BytesIn,
        SrcPortNumber = LocalPort,
        DstIpAddr = RemoteAddress,
        DstPortNumber = RemotePort,
        SrcProcessId = ProcessId
      | extend
        SrcIpAddr = LocalAddress,
        SrcDvcIdType = "MD4IoTid",
        SrcUserId = UserId,
        SrcUserIdType = "Linux",
        SrcDvcId = DeviceId,
        Process = SrcProcessId, // alias
        SrcDvcOs = iif (MessageSource == "Linux", "Linux", "Windows")
    ;
    let InboundNetworkEvents = 
      DirectionNetworkEvents
      | where not(outbound)
      // ***************  Postfilterring *****************************************************************
      | where (array_length(srcipaddr_has_any_prefix)==0 or RemoteAddress==srcipaddr_has_any_prefix) and
              (array_length(dstipaddr_has_any_prefix)==0 or LocalAddress ==dstipaddr_has_any_prefix) and
              (isnull(dstportnumber) or dstportnumber==RemotePort)
      // ***************  Postfilterring *****************************************************************
      | invoke parser ()
      | project-rename
        DstBytes = BytesOut,
        SrcBytes = BytesIn,
        DstPortNumber = LocalPort,
        SrcIpAddr = RemoteAddress,
        SrcPortNumber = RemotePort,
        DstProcessId = ProcessId
      | extend
        DstIpAddr = LocalAddress,
        DstDvcIdType = "MD4IoTid",
        DstUserId = UserId,
        DstUserIdType = "Linux",
        DstDvcId = DeviceId,
        Process = DstProcessId, // alias
        DstDvcOs = iif (MessageSource == "Linux", "Linux", "Windows")
    ;
    let NetworkSessionMD4IoT = 
      union InboundNetworkEvents, OutboundNetworkEvents
      | extend
        EventCount = int(1),
        EventProduct = 'Azure Defender for IoT', 
        EventVendor = 'Microsoft',
        EventSchemaVersion = '0.2.0',
        EventSchema = "NetworkSession", 
        EventType = 'NetworkSession',
        EventStartTime = TimeGenerated, // Open question about timestamps
        EventEndTime = TimeGenerated,  // Open question about timestamps
        EventResult = 'Success',
        EventSeverity = 'Informational'
      | project-rename
        EventProductVersion = AgentVersion, // Not available in Windows
        _ResourceId = AssociatedResourceId, 
        _SubscriptionId = AzureSubscriptionId, 
        EventOriginalUid = OriginalEventId,  // OK pending question
        DvcOs = MessageSource,
        NetworkProtocol = Protocol,
        NetworkApplicationProtocol = ApplicationProtocol,
        DvcId = DeviceId,
        DvcIpAddr = LocalAddress
      | extend
        Dvc = DvcId,
        DvcIdType = "MD4IoTid",
        User = UserId,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        Dst = DstIpAddr
    ;
    NetworkSessionMD4IoT
