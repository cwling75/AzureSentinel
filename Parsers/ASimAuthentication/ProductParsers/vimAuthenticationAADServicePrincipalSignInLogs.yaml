Parser:
  Title: Azure active directory service principal authentication
  Version: '0.0'
  LastUpdated: June 3, 2021
Product:
  Name: Azure active directory service principal signin logs
Normalization:
  Schema: Authentication
  Version: '0.1.0'
References:
- Title: Using functions
  Link: https://docs.microsoft.com/azure/azure-monitor/log-query/function
- Title: Authentication schema documentation
  Link: https://aka.ms/AzSentinelAuthenticationDoc
Description: |
  This Query Parser maps Azure Active Directory Service Principal sign in logs (AADServicePrincipalSignInLogs) to the Advanced SIEM Information Model authentication schema.
ParserName: vimAuthenticationAADServicePrincipalSignInLogs
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: targetusername_has
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let AADSvcPrincipal=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string="*", disabled:bool=false){
    AADServicePrincipalSignInLogs | where not(disabled)
    // ************************************************************************* 
    //       <Prefilterring>
    // *************************************************************************
    | where 
      (isnull(starttime)   or TimeGenerated >= starttime)
      and (isnull(endtime)     or TimeGenerated <= starttime) 
      and (targetusername_has=='*' or (ServicePrincipalName =~ targetusername_has))
    // ************************************************************************* 
    //       </Prefilterring>
    // ************************************************************************* 
    | extend
        EventVendor = 'Microsoft'
        , EventProduct = 'AAD Service Principal'
        , EventCount=int(1)
        , EventSchemaVersion='0.1.0'
        , EventResult = iff (ResultType ==0, 'Success', 'Failure')
        //, EventResultDetails= ResultType
        , EventOriginalResultDetails = coalesce(ResultDescription, ResultType)
        , EventStartTime = TimeGenerated
        , EventEndTime= TimeGenerated
        , EventType= 'Logon'
        , Location = todynamic(LocationDetails)
        , TargetAppId = ResourceIdentity 
        , TargetAppName=ResourceDisplayName
      , TargetUserType='ServicePrincipal'
      , TargetUsername=ServicePrincipalName
      , TargetUserId=ServicePrincipalId
      , TargetUsernameType='Simple'
      , TargetUserIdType='AADID'
    | extend
        SrcGeoCity=tostring(Location.city)
        , SrcGeoCountry=tostring(Location.countryOrRegion)
        , SrcGeoLatitude=toreal(Location.geoCoordinates.latitude)
        , SrcGeoLongitude=toreal(Location.geoCoordinates.longitude)
    | project-rename
        EventOriginalUid =Id
        , TargetSessionId=CorrelationId
        , SrcDvcIpAddr=IPAddress
        | lookup AADSTSErrorCodes on ResultType
    | project-reorder
        TimeGenerated
        ,EventProduct
        , EventOriginalUid
        , EventResult
        //, EventResultDetails
        , EventOriginalResultDetails
        , EventStartTime
        , EventEndTime
        , TargetSessionId
        , SrcGeoCity
        , SrcGeoCountry
        , TargetAppId
        // ** Aliases
        | extend 
          User=TargetUsername
      , LogonTarget=ResourceIdentity
      , Dvc=EventVendor};
  AADSvcPrincipal(starttime, endtime, targetusername_has, disabled)