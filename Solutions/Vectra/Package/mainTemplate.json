{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Nikhil Tripathi - v-ntripathi@microsoft.com",
    "comments": "Solution template for Vectra"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[parameters('location')]",
      "metadata": {
        "description": "Region to deploy solution resources"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Sentinel is setup"
      }
    },
    "connector1-name": {
      "type": "string",
      "defaultValue": "6c7f932b-4e6c-4f8f-ab49-90300b71d60b"
    }
  },
  "variables": {
    "connector1-source": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'),'/providers/Microsoft.SecurityInsights/dataConnectors/',parameters('connector1-name'))]",
    "_connector1-source": "[variables('connector1-source')]",
    "AIVectraStreamConnector": "AIVectraStreamConnector",
    "_AIVectraStreamConnector": "[variables('AIVectraStreamConnector')]",
    "workspace-dependency": "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspace'))]",
    "VectraStream_function_Parser": "VectraStream_function_Parser",
    "_VectraStream_function_Parser": "[variables('VectraStream_function_Parser')]",
    "sourceId": "Vectraiinc.vectra_sentinel_solution",
    "_sourceId": "[variables('sourceId')]"
  },
  "resources": [
    {
      "id": "[variables('_connector1-source')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('connector1-name'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "AI Vectra Stream",
          "publisher": "Vectra AI",
          "descriptionMarkdown": "The AI Vectra Stream connector allows to send Network Metadata colelcted by Vectra Sensors accross the Network and Cloud to Azure Sentinel",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "VectraStream_CL",
              "baseQuery": "VectraStream_CL"
            }
          ],
          "sampleQueries": [
            {
              "description": "List all DNS Queries",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| project orig_hostname, id_orig_h, resp_hostname, id_resp_h, id_resp_p, qtype_name, ['query'], answers"
            },
            {
              "description": "Number of DNS requests per type",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| summarize count() by type_name"
            },
            {
              "description": "Top 10 of query to non existing domain",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where rcode_name == \"NXDomain\"\n| summarize Count=count() by tostring(query)\n| order by Count desc\n| limit 10"
            },
            {
              "description": "Host and Web sites using non-ephemeral Diffie-Hellman key exchange",
              "query": "VectraStream \n| where metadata_type == \"metadat_dns\" \n| where cipher contains \"TLS_RSA\"\n| distinct orig_hostname, id_orig_h, id_resp_h, server_name, cipher\n| project orig_hostname, id_orig_h, id_resp_h, server_name, cipher"
            }
          ],
          "dataTypes": [
            {
              "name": "VectraStream_CL",
              "lastDataReceivedQuery": "\nVectraStream\n |  summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "\nVectraStream\n| summarize LastLogReceived = max(TimeGenerated)\n| project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": true
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Vectra AI Brain",
                "description": "must be configured to export Stream metadata in JSON"
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected **VectraStream** which is deployed with the Azure Sentinel Solution."
            },
            {
              "description": "Install the Linux agent on sperate Linux instance.\n\n> Logs are collected only from **Linux** agents.",
              "instructions": [
                {
                  "parameters": {
                    "title": "Choose where to install the Linux agent:",
                    "instructionSteps": [
                      {
                        "title": "Install agent on Azure Linux Virtual Machine",
                        "description": "Select the machine to install the agent on and then click **Connect**.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxVirtualMachine"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      },
                      {
                        "title": "Install agent on a non-Azure Linux Machine",
                        "description": "Download the agent on the relevant machine and follow the instructions.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxNonAzure"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ],
              "title": "1. Install and onboard the agent for Linux"
            },
            {
              "description": "Follow the configuration steps below to get Vectra Stream metadata into Azure Sentinel. The Log Analytics agent is leveraged to send custom JSON into Azure Monitor, enabling the storage of the metadata into a custom table. For more information, refer to the [Azure Monitor Documentation](https://docs.microsoft.com/azure/azure-monitor/agents/data-sources-json).\n1. Download config file for the log analytics agent: VectraStream.conf (located in the Connector folder within the Vectra solution: https://aka.ms/sentinel-aivectrastream-conf).\n2. Login to the server where you have installed Azure Log Analytics agent.\n3. Copy VectraStream.conf to the /etc/opt/microsoft/omsagent/**workspace_id**/conf/omsagent.d/ folder.\n4. Edit VectraStream.conf as follows:\n\n\t i. configure an alternate port to send data to, if desired. Default port is 29009.\n\n\t ii. replace **workspace_id** with real value of your Workspace ID.\n5. Save changes and restart the Azure Log Analytics agent for Linux service with the following command:\n\t\tsudo /opt/microsoft/omsagent/bin/service_control restart",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "2. Configure the logs to be collected"
            },
            {
              "description": "Configure Vectra AI Brain to forward Stream metadata in JSON format to your Azure Sentinel workspace via the Log Analytics Agent.\n\nFrom the Vectra UI, navigate to Settings > Cognito Stream and Edit the destination configuration:\n\n- Select Publisher: RAW JSON\n\n- Set the server IP or hostname (which is the host which run the Log Analytics Agent)\n\n- Set all the port to **29009** (this port can be modified if required)\n\n- Save\n\n- Set Log types (Select all log types available)\n\n- Click on **Save**\n\n",
              "title": "3. Configure and connect Vectra AI Stream"
            }
          ],
          "additionalRequirementBanner": "This data connector depends on a parser based on a Kusto Function to work as expected [**VectraStream**](https://aka.ms/sentinel-aivectrastream-parser) which is deployed with the Azure Sentinel Solution."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[parameters('workspace')]",
      "location": "[parameters('workspace-location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Vectra Data Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Vectra Data Parser",
            "category": "Samples",
            "functionAlias": "VectraStream_function",
            "query": "\nVectraStream_CL\r\n| extend\r\n    EventVendor=\"Vectra AI\",\r\n    EventProduct=\"Vectra Stream\",\r\n    EventEndTime=column_ifexists('ts_d', ''),\r\n    metadata_type_s = column_ifexists('metadata_type_s', ''),\r\n    community_id_s = column_ifexists('community_id_s', ''),\r\n    id_ip_ver_s = column_ifexists('id_ip_ver_s', ''),\r\n    id_orig_h_s = column_ifexists('id_orig_h_s', ''),\r\n    id_orig_p_d = column_ifexists('id_orig_p_d', ''),\r\n    id_resp_h_s = column_ifexists('id_resp_h_s', ''),\r\n    id_resp_p_d = column_ifexists('id_resp_p_d', ''),\r\n    resp_hostname_s = column_ifexists('resp_hostname_s', ''),\r\n    local_orig_b = column_ifexists('local_orig_b', ''),\r\n    local_resp_b = column_ifexists('local_resp_b', ''),\r\n    orig_huid_s = column_ifexists('orig_huid_s', ''),\r\n    orig_hostname_s = column_ifexists('orig_hostname_s', ''),\r\n    orig_sluid_s = column_ifexists('orig_sluid_s', ''),\r\n    resp_huid_s = column_ifexists('resp_huid_s', ''),\r\n    resp_sluid_s = column_ifexists('resp_sluid_s', ''),\r\n    sensor_uid_s = column_ifexists('sensor_uid_s', ''),\r\n    uid_s = column_ifexists('uid_s', ''),\r\n    ts_d = column_ifexists('ts_d', ''),\r\n    error_s = column_ifexists('error_s', ''),\r\n\tconn_state_s = column_ifexists('conn_state_s', ''),\r\n    duration_d = column_ifexists('duration_d', ''),\r\n    service_s = column_ifexists('service_s', ''),\r\n    proto_d = column_ifexists('proto_d', ''),\r\n    protoName_s = column_ifexists('protoName_s', ''),\r\n    orig_ip_bytes_d = column_ifexists('orig_ip_bytes_d', ''),\r\n    resp_ip_bytes_d = column_ifexists('resp_ip_bytes_d', ''),\r\n    orig_pkts_d = column_ifexists('orig_pkts_d', ''),\r\n    resp_pkts_d = column_ifexists('resp_pkts_d', ''),\r\n    session_start_time_d = column_ifexists('session_start_time_d', ''),\r\n    resp_domain_s = column_ifexists('resp_domain_s', ''),\r\n    orig_vlan_id_d = column_ifexists('orig_vlan_id_d', ''),\r\n    resp_vlan_id_d = column_ifexists('resp_vlan_id_d', ''),\r\n    first_orig_resp_data_pkt_s = column_ifexists('first_orig_resp_data_pkt_s', ''),\r\n    first_resp_orig_data_pkt_s = column_ifexists('first_resp_orig_data_pkt_s', ''),\r\n    first_orig_resp_data_pkt_time_d = column_ifexists('first_orig_resp_data_pkt_time_d', ''),\r\n    first_resp_orig_data_pkt_time_d = column_ifexists('first_resp_orig_data_pkt_time_d', ''),\r\n    first_orig_resp_pkt_time_d = column_ifexists('first_orig_resp_pkt_time_d', ''),\r\n    first_resp_orig_pkt_time_d = column_ifexists('first_resp_orig_pkt_time_d', ''),\r\n    resp_multihomed_b = column_ifexists('resp_multihomed_b', ''),\r\n    //beacon specific attributes\r\n\tbeacon_type_s = column_ifexists('beacon_type_s', ''),\r\n    beacon_uid_s = column_ifexists('beacon_uid_s', ''),\r\n    first_event_time_d = column_ifexists('first_event_time_d', ''),\r\n    last_event_time_d = column_ifexists('last_event_time_d', ''),\r\n    resp_domains_s = column_ifexists('resp_domains_s', ''),\r\n    session_count_d = column_ifexists('session_count_d', ''),\r\n    //dcerpc\r\n\trtt_s = column_ifexists('rtt_s', ''),\r\n    endpoint_s = column_ifexists('endpoint_s', ''),\r\n    username_s = column_ifexists('username_s', ''),\r\n    hostname_s = column_ifexists('hostname_s', ''),\r\n    domain_s = column_ifexists('domain_s', ''),\r\n    operation_s = column_ifexists('operation_s', ''),\r\n\t//dhcp\r\n    mac_s = column_ifexists('mac_s', ''),\r\n    assigned_ip_s = column_ifexists('assigned_ip_s', ''),\r\n    lease_time_d = column_ifexists('lease_time_d', ''),\r\n    trans_id_s = column_ifexists('trans_id_s', ''),\r\n    dhcp_server_ip_s = column_ifexists('dhcp_server_ip_s', ''),\r\n    dns_server_ips_s = column_ifexists('dns_server_ips_s', ''),\r\n\t//dns\r\n    trans_id_d = column_ifexists('trans_id_d', ''),\r\n    query_s = column_ifexists('query_s', ''),\r\n    qclass_d = column_ifexists('qclass_d', ''),\r\n    qclass_name_s = column_ifexists('qclass_name_s', ''),\r\n    qtype_d = column_ifexists('qtype_d', ''),\r\n    qtype_name_s = column_ifexists('qtype_name_s', ''),\r\n    rcode_d = column_ifexists('rcode_d', ''),\r\n    rcode_name_s = column_ifexists('rcode_name_s', ''),\r\n    AA_b = column_ifexists('AA_b', ''),\r\n    TC_b = column_ifexists('TC_b', ''),\r\n    RD_b = column_ifexists('RD_b', ''),\r\n    RA_b = column_ifexists('RA_b', ''),\r\n    answers_s = column_ifexists('answers_s', ''),\r\n    TTLs_s = column_ifexists('TTLs_s', ''),\r\n    auth_s = column_ifexists('auth_s', ''),\r\n    total_answers_d = column_ifexists('total_answers_d', ''),\r\n    total_replies_d = column_ifexists('total_replies_d', ''),\r\n    rejected_b = column_ifexists('rejected_b', ''),\r\n    saw_query_b = column_ifexists('saw_query_b', ''),\r\n    saw_reply_b = column_ifexists('saw_reply_b', ''),\r\n    values_s = column_ifexists('values_s', ''),\r\n\t//http\r\n    method_s = column_ifexists('method_s', ''),\r\n    host_s = column_ifexists('host_s', ''),\r\n    uri_s = column_ifexists('uri_s', ''),\r\n    referrer_s = column_ifexists('referrer_s', ''),\r\n    user_agent_s = column_ifexists('user_agent_s', ''),\r\n    request_body_len_d = column_ifexists('request_body_len_d', ''),\r\n    response_body_len_d = column_ifexists('response_body_len_d', ''),\r\n    orig_mime_types_s = column_ifexists('orig_mime_types_s', ''),\r\n    resp_mime_types_s = column_ifexists('resp_mime_types_s', ''),\r\n    status_code_d = column_ifexists('status_code_d', ''),\r\n    status_msg_s = column_ifexists('status_msg_s', ''),\r\n    proxied_s = column_ifexists('proxied_s', ''),\r\n    cookie_s = column_ifexists('cookie_s', ''),\r\n    cookie_vars_s = column_ifexists('cookie_vars_s', ''),\r\n    request_cache_control_s = column_ifexists('request_cache_control_s', ''),\r\n    response_cache_control_s = column_ifexists('response_cache_control_s', ''),\r\n    response_expires_s = column_ifexists('response_expires_s', ''),\r\n    request_header_count_d = column_ifexists('request_header_count_d', ''),\r\n    response_header_count_d = column_ifexists('response_header_count_d', ''),\r\n    is_proxied_b = column_ifexists('is_proxied_b', ''),\r\n    host_multihomed_s = column_ifexists('host_multihomed_s', ''),\r\n\t//Kerberos\r\n    client_s = column_ifexists('client_s', ''),\r\n    data_source_s = column_ifexists('data_source_s', ''),\r\n    success_b = column_ifexists('success_b', ''),\r\n    error_code_s = column_ifexists('error_code_s', ''),\r\n    error_msg_s = column_ifexists('error_msg_s', ''),\r\n    request_type_s = column_ifexists('request_type_s', ''),\r\n    protocol_s = column_ifexists('protocol_s', ''),\r\n    reply_timestamp_d = column_ifexists('reply_timestamp_d', ''),\r\n    orig_host_observed_privilege_d = column_ifexists('orig_host_observed_privilege_d', ''),\r\n    req_ciphers_s = column_ifexists('req_ciphers_s', ''),\r\n    rep_cipher_s = column_ifexists('rep_cipher_s', ''),\r\n    //ldap\r\n    message_id_d = column_ifexists('message_id_d', ''),\r\n    base_object_s = column_ifexists('base_object_s', ''),\r\n    query_scope_s = column_ifexists('query_scope_s', ''),\r\n    result_s = column_ifexists('result_s', ''),\r\n    matched_dn_s = column_ifexists('matched_dn_s', ''),\r\n    duration_s = column_ifexists('duration_s', ''),\r\n    attributes_s = column_ifexists('attributes_s', ''),\r\n    bind_error_count_d = column_ifexists('bind_error_count_d', ''),\r\n    encrypted_sasl_payload_count_d = column_ifexists('encrypted_sasl_payload_count_d', ''),\r\n    logon_failure_error_count_s = column_ifexists('logon_failure_error_count_s', ''),\r\n    response_bytes_s = column_ifexists('response_bytes_s', ''),\r\n    request_bytes_s = column_ifexists('request_bytes_s', ''),\r\n    result_code_s = column_ifexists('result_code_s', ''),\r\n    result_count_d = column_ifexists('result_count_d', ''),\r\n    is_query_b = column_ifexists('is_query_b', ''),\r\n    is_close_b = column_ifexists('is_close_b', ''),\r\n\t//ntlm\r\n    status_d = column_ifexists('status_d', ''),\r\n\t//rdp\r\n    keyboard_layout_s = column_ifexists('keyboard_layout_s', ''),\r\n    client_build_d = column_ifexists('client_build_d', ''),\r\n    client_dig_protocol_id_d = column_ifexists('client_dig_protocol_id_d', ''),\r\n    client_dig_product_id_d = column_ifexists('client_dig_product_id_d', ''),\r\n    client_name_s = column_ifexists('client_name_s', ''),\r\n    desktop_width_d = column_ifexists('desktop_width_d', ''),\r\n    desktop_height_d = column_ifexists('desktop_height_d', ''),\r\n\t//smbfiles\r\n    action_s = column_ifexists('action_s', ''),\r\n    delete_on_close_b = column_ifexists('delete_on_close_b', ''),\r\n    path_s = column_ifexists('path_s', ''),\r\n    name_s = column_ifexists('name_s', ''),\r\n    prev_name_s = column_ifexists('prev_name_s', ''),\r\n    version_s = column_ifexists('version_s', ''),\r\n\t//smtp\r\n    helo_s = column_ifexists('helo_s', ''),\r\n    mail_from_s = column_ifexists('mail_from_s', ''),\r\n    rcpt_to_s = column_ifexists('rcpt_to_s', ''),\r\n    date_d = column_ifexists('date_d', ''),\r\n    from_s = column_ifexists('from_s', ''),\r\n    to_s = column_ifexists('to_s', ''),\r\n    cc_s = column_ifexists('cc_s', ''),\r\n    reply_to_s = column_ifexists('reply_to_s', ''),\r\n    msgid_d = column_ifexists('msgid_d', ''),\r\n    in_reply_to_s = column_ifexists('in_reply_to_s', ''),\r\n    subject_s = column_ifexists('subject_s', ''),\r\n    x_originating_ip_s = column_ifexists('x_originating_ip_s', ''),\r\n    first_received_s = column_ifexists('first_received_s', ''),\r\n    second_received_s = column_ifexists('second_received_s', ''),\r\n    useragent_s = column_ifexists('useragent_s', ''),\r\n    tls_s = column_ifexists('tls_s', ''),\r\n    spf_helo_s = column_ifexists('spf_helo_s', ''),\r\n    spf_mailfrom_s = column_ifexists('spf_mailfrom_s', ''),\r\n    dkim_status_s = column_ifexists('dkim_status_s', ''),\r\n    dmarc_status_s = column_ifexists('dmarc_status_s', ''),\r\n\t//ssh\r\n    server_s = column_ifexists('server_s', ''),\r\n    cipher_alg_s = column_ifexists('cipher_alg_s', ''),\r\n    mac_alg_s = column_ifexists('mac_alg_s', ''),\r\n    compression_alg_s = column_ifexists('compression_alg_s', ''),\r\n    kex_alg_s = column_ifexists('kex_alg_s', ''),\r\n    host_key_alg_s = column_ifexists('host_key_alg_s', ''),\r\n    host_key_s = column_ifexists('host_key_s', ''),\r\n    hassh_g = column_ifexists('hassh_g', ''),\r\n    hasshServer_g = column_ifexists('hasshServer_g', ''),\r\n\t//ssl\r\n    server_name_s = column_ifexists('server_name_s', ''),\r\n    established_b = column_ifexists('established_b', ''),\r\n    next_protocol_s = column_ifexists('next_protocol_s', ''),\r\n    cipher_s = column_ifexists('cipher_s', ''),\r\n    version_num_d = column_ifexists('version_num_d', ''),\r\n    curve_s = column_ifexists('curve_s', ''),\r\n    issuer_s = column_ifexists('issuer_s', ''),\r\n    client_issuer_s = column_ifexists('client_issuer_s', ''),\r\n    client_subject_s = column_ifexists('client_subject_s', ''),\r\n    client_version_num_d = column_ifexists('client_version_num_d', ''),\r\n    client_version_s = column_ifexists('client_version_s', ''),\r\n    client_extension_s = column_ifexists('client_extension_s', ''),\r\n    client_ec_point_format_s = column_ifexists('client_ec_point_format_s', ''),\r\n    client_curve_num_s = column_ifexists('client_curve_num_s', ''),\r\n    ja3_g = column_ifexists('ja3_g', ''),\r\n    ja3s_g = column_ifexists('ja3s_g', ''),\r\n    server_extensions_s = column_ifexists('server_extensions_s', ''),\r\n\t//x509\r\n    certificate_version_d = column_ifexists('certificate_version_d', ''),\r\n    certificate_serial_s = column_ifexists('certificate_serial_s', ''),\r\n    certificate_subject_s = column_ifexists('certificate_subject_s', ''),\r\n    certificate_issuer_s = column_ifexists('certificate_issuer_s', ''),\r\n    certificate_key_alg_s = column_ifexists('certificate_key_alg_s', ''),\r\n    certificate_key_length_s = column_ifexists('certificate_key_length_s', ''),\r\n    certificate_key_type_s = column_ifexists('certificate_key_type_s', ''),\r\n    certificate_not_valid_after_d = column_ifexists('certificate_not_valid_after_d', ''),\r\n    certificate_not_valid_before_d = column_ifexists('certificate_not_valid_before_d', ''),\r\n    certificate_exponent_s = column_ifexists('certificate_exponent_s', ''),\r\n    certificate_sig_alg_s = column_ifexists('certificate_sig_alg_s', ''),\r\n    certificate_self_issued_b = column_ifexists('certificate_self_issued_b', ''),\r\n    certificate_curve_s = column_ifexists('certificate_curve_s', ''),\r\n    certificate_cn_s = column_ifexists('certificate_cn_s', ''),\r\n    san_dns_s = column_ifexists('san_dns_s', ''),\r\n    san_email_s = column_ifexists('san_email_s', ''),\r\n    san_ip_s = column_ifexists('san_ip_s', ''),\r\n    san_other_fields_b = column_ifexists('san_other_fields_b', ''),\r\n    basic_constraints_b = column_ifexists('basic_constraints_b', '')\r\n| project-rename\r\n    metadata_type = metadata_type_s,\r\n    community_id = community_id_s,\r\n    id_ip_ver = id_ip_ver_s,\r\n    id_orig_h = id_orig_h_s,\r\n    id_orig_p = id_orig_p_d,\r\n    id_resp_h = id_resp_h_s,\r\n    id_resp_p = id_resp_p_d,\r\n    resp_hostname = resp_hostname_s,\r\n    local_orig = local_orig_b,\r\n    local_resp = local_resp_b,\r\n    orig_huid = orig_huid_s,\r\n    orig_hostname = orig_hostname_s,\r\n    orig_sluid = orig_sluid_s,\r\n    resp_huid = resp_huid_s,\r\n    resp_sluid = resp_sluid_s,\r\n    sensor_uid = sensor_uid_s,\r\n    uid = uid_s,\r\n    ts = ts_d,\r\n    error = error_s,\r\n\tconn_state = conn_state_s,\r\n    duration = duration_d,\r\n    service = service_s,\r\n    proto = proto_d,\r\n    protoName = protoName_s,\r\n    orig_ip_bytes = orig_ip_bytes_d,\r\n    resp_ip_bytes = resp_ip_bytes_d,\r\n    orig_pkts = orig_pkts_d,\r\n    resp_pkts = resp_pkts_d,\r\n    session_start_time = session_start_time_d,\r\n    resp_domain = resp_domain_s,\r\n    orig_vlan_id = orig_vlan_id_d,\r\n    resp_vlan_id = resp_vlan_id_d,\r\n    first_orig_resp_data_pkt = first_orig_resp_data_pkt_s,\r\n    first_resp_orig_data_pkt = first_resp_orig_data_pkt_s,\r\n    first_orig_resp_data_pkt_time = first_orig_resp_data_pkt_time_d,\r\n    first_resp_orig_data_pkt_time = first_resp_orig_data_pkt_time_d,\r\n    first_orig_resp_pkt_time = first_orig_resp_pkt_time_d,\r\n    first_resp_orig_pkt_time = first_resp_orig_pkt_time_d,\r\n    resp_multihomed = resp_multihomed_b,\r\n    //beacon specific attributes\r\n\tbeacon_type = beacon_type_s,\r\n    beacon_uid = beacon_uid_s,\r\n    first_event_time = first_event_time_d,\r\n    last_event_time = last_event_time_d,\r\n    resp_domains = resp_domains_s,\r\n    session_count = session_count_d,\r\n    //dcerpc\r\n\trtt = rtt_s,\r\n    endpoint = endpoint_s,\r\n    username = username_s,\r\n    hostname = hostname_s,\r\n    domain = domain_s,\r\n    operation = operation_s,\r\n\t//dhcp\r\n    mac = mac_s,\r\n    assigned_ip = assigned_ip_s,\r\n    lease_time = lease_time_d,\r\n    dhcp_server_ip = dhcp_server_ip_s,\r\n    dns_server_ips = dns_server_ips_s,\r\n\t//dns\r\n    trans_id = trans_id_d,\r\n    query = query_s,\r\n    qclass = qclass_d,\r\n    qclass_name = qclass_name_s,\r\n    qtype = qtype_d,\r\n    qtype_name = qtype_name_s,\r\n    rcode = rcode_d,\r\n    rcode_name = rcode_name_s,\r\n    AA = AA_b,\r\n    TC = TC_b,\r\n    RD = RD_b,\r\n    RA = RA_b,\r\n    answers = answers_s,\r\n    TTLs = TTLs_s,\r\n    auth = auth_s,\r\n    total_answers = total_answers_d,\r\n    total_replies = total_replies_d,\r\n    rejected = rejected_b,\r\n    saw_query = saw_query_b,\r\n    saw_reply = saw_reply_b,\r\n    values = values_s,\r\n\t//http\r\n    method = method_s,\r\n    host = host_s,\r\n    uri = uri_s,\r\n    referrer = referrer_s,\r\n    user_agent = user_agent_s,\r\n    request_body_len = request_body_len_d,\r\n    response_body_len = response_body_len_d,\r\n    orig_mime_types = orig_mime_types_s,\r\n    resp_mime_types = resp_mime_types_s,\r\n    status_code = status_code_d,\r\n    status_msg = status_msg_s,\r\n    proxied = proxied_s,\r\n    cookie = cookie_s,\r\n    cookie_vars = cookie_vars_s,\r\n    request_cache_control = request_cache_control_s,\r\n    response_cache_control = response_cache_control_s,\r\n    response_expires = response_expires_s,\r\n    request_header_count = request_header_count_d,\r\n    response_header_count = response_header_count_d,\r\n    is_proxied = is_proxied_b,\r\n    host_multihomed = host_multihomed_s,\r\n\t//Kerberos\r\n    client = client_s,\r\n    data_source = data_source_s,\r\n    success = success_b,\r\n    error_code = error_code_s,\r\n    error_msg = error_msg_s,\r\n    request_type = request_type_s,\r\n    protocol = protocol_s,\r\n    reply_timestamp = reply_timestamp_d,\r\n    orig_host_observed_privilege = orig_host_observed_privilege_d,\r\n    req_ciphers = req_ciphers_s,\r\n    rep_cipher = rep_cipher_s,\r\n    //ldap\r\n    message_id = message_id_d,\r\n    base_object = base_object_s,\r\n    query_scope = query_scope_s,\r\n    result = result_s,\r\n    matched_dn = matched_dn_s,\r\n    duration_s = duration_s,\r\n    attributes = attributes_s,\r\n    bind_error_count = bind_error_count_d,\r\n    encrypted_sasl_payload_count = encrypted_sasl_payload_count_d,\r\n    logon_failure_error_count = logon_failure_error_count_s,\r\n    response_bytes = response_bytes_s,\r\n    request_bytes = request_bytes_s,\r\n    result_code = result_code_s,\r\n    result_count = result_count_d,\r\n    is_query = is_query_b,\r\n    is_close = is_close_b,\r\n\t//ntlm\r\n    status = status_d,\r\n\t//rdp\r\n    keyboard_layout = keyboard_layout_s,\r\n    client_build = client_build_d,\r\n    client_dig_protocol_id = client_dig_protocol_id_d,\r\n    client_dig_product_id = client_dig_product_id_d,\r\n    client_name = client_name_s,\r\n    desktop_width = desktop_width_d,\r\n    desktop_height = desktop_height_d,\r\n\t//smbfiles\r\n    action = action_s,\r\n    delete_on_close = delete_on_close_b,\r\n    path = path_s,\r\n    name = name_s,\r\n    prev_name = prev_name_s,\r\n    version = version_s,\r\n\t//smtp\r\n    helo = helo_s,\r\n    mail_from = mail_from_s,\r\n    rcpt_to = rcpt_to_s,\r\n    date_msg = date_d,\r\n    from = from_s,\r\n    to_msg = to_s,\r\n    cc = cc_s,\r\n    reply_to = reply_to_s,\r\n    msgid = msgid_d,\r\n    in_reply_to = in_reply_to_s,\r\n    subject = subject_s,\r\n    x_originating_ip = x_originating_ip_s,\r\n    first_received = first_received_s,\r\n    second_received = second_received_s,\r\n    useragent = useragent_s,\r\n    tls = tls_s,\r\n    spf_helo = spf_helo_s,\r\n    spf_mailfrom = spf_mailfrom_s,\r\n    dkim_status = dkim_status_s,\r\n    dmarc_status = dmarc_status_s,\r\n\t//ssh\r\n    server = server_s,\r\n    cipher_alg = cipher_alg_s,\r\n    mac_alg = mac_alg_s,\r\n    compression_alg = compression_alg_s,\r\n    kex_alg = kex_alg_s,\r\n    host_key_alg = host_key_alg_s,\r\n    host_key = host_key_s,\r\n    hassh = hassh_g,\r\n    hasshServer = hasshServer_g,\r\n\t//ssl\r\n    server_name = server_name_s,\r\n    established = established_b,\r\n    next_protocol = next_protocol_s,\r\n    cipher = cipher_s,\r\n    version_num = version_num_d,\r\n    curve = curve_s,\r\n    issuer = issuer_s,\r\n    client_issuer = client_issuer_s,\r\n    client_subject = client_subject_s,\r\n    client_version_num = client_version_num_d,\r\n    client_version = client_version_s,\r\n    client_extension = client_extension_s,\r\n    client_ec_point_format = client_ec_point_format_s,\r\n    client_curve_num = client_curve_num_s,\r\n    ja3 = ja3_g,\r\n    ja3s = ja3s_g,\r\n    server_extensions = server_extensions_s,\r\n\t//x509\r\n    certificate_version = certificate_version_d,\r\n    certificate_serial = certificate_serial_s,\r\n    certificate_subject = certificate_subject_s,\r\n    certificate_issuer = certificate_issuer_s,\r\n    certificate_key_alg = certificate_key_alg_s,\r\n    certificate_key_length = certificate_key_length_s,\r\n    certificate_key_type = certificate_key_type_s,\r\n    certificate_not_valid_after = certificate_not_valid_after_d,\r\n    certificate_not_valid_before = certificate_not_valid_before_d,\r\n    certificate_exponent = certificate_exponent_s,\r\n    certificate_sig_alg = certificate_sig_alg_s,\r\n    certificate_self_issued = certificate_self_issued_b,\r\n    certificate_curve = certificate_curve_s,\r\n    certificate_cn = certificate_cn_s,\r\n    san_dns = san_dns_s,\r\n    san_email = san_email_s,\r\n    san_ip = san_ip_s,\r\n    san_other_fields = san_other_fields_b,\r\n    basic_constraints = basic_constraints_b",
            "version": 1
          }
        }
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "version": "1.1.0",
        "kind": "Solution",
        "contentId": "[variables('_sourceId')]",
        "parentId": "[variables('_sourceId')]",
        "source": {
          "kind": "Solution",
          "name": "Vectra",
          "sourceId": "[variables('_sourceId')]"
        },
        "author": {
          "name": "Nikhil Tripathi",
          "email": "v-ntripathi@microsoft.com"
        },
        "support": {
          "name": "Vectra AI",
          "email": "tme@vectra.ai",
          "tier": "Partner",
          "link": "https://www.vectra.ai/support"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_AIVectraStreamConnector')]",
              "version": "1.1.0"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_VectraStream_function_Parser')]",
              "version": "1.1.0"
            }
          ]
        },
        "firstPublishDate": "2021-10-18",
        "providers": [
          "Vectra AI"
        ],
        "categories": {
          "domains": [
            "Security – Network"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_sourceId'))]"
    }
  ],
  "outputs": {}
}
