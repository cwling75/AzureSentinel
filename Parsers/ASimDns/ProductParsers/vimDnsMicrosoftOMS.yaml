Parser:
  Title: DNS activity ASIM filtering parser for Windows DNS Log collected using the Log Analytics Agent
  Version: '0.2'
  LastUpdated: Nov 11 2021
Product:
  Name: MS DNS Events
Normalization:
  Schema: Dns
  Version: '0.1.3'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
   This ASIM parser supports filtering and normalizing Windows DNS Log collected using the Log Analytics Agent to the ASIM DNS activity normalized schema.
ParserName: vimDnsMicrosoftOMS
EquivalentBuiltInParser: _Im_Dns_MicrosoftOMS
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr
    Type: string
    Default: '*'
  - Name: domain_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: responsecodename
    Type: string
    Default: '*'
  - Name: response_has_ipv4
    Type: string
    Default: '*'
  - Name: response_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: 'Query'
  - Name: disabled
    Type: bool
    Default: false

ParserQuery: |
 let EventTypeTable=datatable(EventId:int,EventType:string,EventSubType:string, EventResult:string)[
    256, 'Query', 'request', 'NA'
  , 257, 'Query', 'response', 'Success'
  , 258, 'Query', 'response', 'Based on RCODE'
  , 259, 'Query', 'response', 'Based on RCODE'
  , 260, 'Query', 'request', 'NA'
  , 261, 'Query', 'response', 'NA'
  , 262, 'Query', 'response', 'Based on RCODE'
  , 263, 'Update', 'request', 'NA'
  , 264, 'Update', 'response', 'Based on RCODE'
  , 265, 'XFR', 'request', 'NA' 
  , 266, 'XFR', 'request', 'NA'
  , 267, 'XFR', 'response', 'Based on RCODE'
  , 268, 'XFR', 'response', 'Based on RCODE'
  , 269, 'XFR', 'request', 'NA'
  , 270, 'XFR', 'request', 'NA'
  , 271, 'XFR', 'response', 'Based on RCODE'
  , 272, 'XFR', 'response', 'Based on RCODE'
  , 273, 'XFR', 'request', 'NA'
  , 274, 'XFR', 'request', 'NA'
  , 275, 'XFR', 'response', 'Success'
  , 276, 'XFR', 'response', 'Success'
  , 277, 'Update', 'request', 'NA'
  , 278, 'Update', 'response', 'Based on RCODE'
  , 279, 'Query', 'NA', 'NA'
  , 280, 'Query', 'NA', 'NA'
  ];
  let RCodeTable=datatable(DnsResponseCode:int,DnsResponseCodeName:string)[
     0, 'NOERROR'
   , 1, "FORMERR"
   , 2,"SERVFAIL"
   , 3,'NXDOMAIN'
   , 4,'NOTIMP'
   , 5,'REFUSED'
   , 6,'YXDOMAIN'
   , 7,'YXRRSET'
   , 8,'NXRRSET'
   , 9,'NOTAUTH'
   , 10,'NOTZONE'
   , 11,'DSOTYPENI'
   , 16,'BADVERS'
   , 16,'BADSIG'
   , 17,'BADKEY'
   , 18,'BADTIME'
   , 19,'BADMODE'
   , 20,'BADNAME'
   , 21,'BADALG'
   , 22,'BADTRUNC'
   , 23,'BADCOOKIE'];
  let DNSQuery_MS=(
    starttime:datetime=datetime(null), 
    endtime:datetime=datetime(null),
    srcipaddr:string='*',
    domain_has_any:dynamic=dynamic([]),
    responsecodename:string='*', 
    response_has_ipv4:string='*',
    response_has_any_prefix:dynamic=dynamic([]),
    eventtype:string='Query',
    disabled:bool=false
    ){
    let rcodenames=toscalar(RCodeTable | where DnsResponseCodeName == responsecodename | project DnsResponseCode);
    DnsEvents | where not(disabled)
    // ******************************************************************
      //  Pre-parsing filtering:
    | where
          (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
          and (srcipaddr=='*' or ClientIP==srcipaddr)
          and (array_length(domain_has_any) ==0 or Name has_any (domain_has_any))
          and (responsecodename=='*' or ResultCode == rcodenames)
          and (response_has_ipv4=='*' or has_ipv4(IPAddresses,response_has_ipv4) )
          and (array_length(response_has_any_prefix) ==0 or has_any_ipv4_prefix(IPAddresses, response_has_any_prefix)  )
    // *****************************************************************
    | where EventId < 500
    | lookup EventTypeTable on EventId
    // late filtering:
    | extend
      eventtype = iff (eventtype == "lookup", "Query", eventtype)
    | where (eventtype == "*" or eventtype == EventType)
    | project-rename
         Dvc=Computer ,
         SrcIpAddr = ClientIP,
         DnsQueryTypeName=QueryType,
         EventMessage = Message,
         EventOriginalType = EventId,
         EventReportUrl = ReportReferenceLink,
         DnsResponseName = IPAddresses,
         DnsQuery = Name,
         DnsResponseCode = ResultCode
  | extend
         EventCount=int(1),
         EventStartTime=TimeGenerated,
         EventVendor = "Microsoft",
         EventProduct = "Microsoft DNS Server",
         EventSchema = "Dns",
         EventSchemaVersion="0.1.3",
         EventEndTime=TimeGenerated,
         EventSeverity = tostring(Severity),
         DvcHostname = Dvc
    | lookup RCodeTable on DnsResponseCode
    | extend EventResultDetails = case (isnotempty(DnsResponseCodeName), DnsResponseCodeName
                                    , DnsResponseCode between (3841 .. 4095), 'Reserved for Private Use'
                                    , 'Unassigned'),
      EventResult = iff (EventResult == "Based on RCODE", iff(DnsResponseCode == 0, "Success", "Failure"),EventResult)
    // **************Aliases
    | extend
        DnsResponseCodeName=EventResultDetails,
        Domain=DnsQuery,
        IpAddr=SrcIpAddr,
        Src=SrcIpAddr,
    // Backward Competability
      Query=DnsQuery
      , QueryTypeName=DnsQueryTypeName
      , ResponseName=DnsResponseName
      , ResponseCode=DnsResponseCode
      , ResponseCodeName=DnsResponseCodeName
        };
  DNSQuery_MS (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)
