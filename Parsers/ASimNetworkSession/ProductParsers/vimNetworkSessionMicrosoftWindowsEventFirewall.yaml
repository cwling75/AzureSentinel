Parser:
  Title: Microsoft Windows Event Firewall Network Sessions
  Version: '0.1'
  LastUpdated: Sep 1, 2021
Product:
  Name: WindowsEventFirewall
Normalization:
  Schema: NetworkSession
  Version: '0.2.0'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/AzSentinelNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AzSentinelNormalization
Description: |
        This Query Parser maps Microsoft Windows Firewall Events (WindowsEvent and SecurityEvent tables) to the Advanced SIEM Information Model Network Session schema.
        Event IDs which are parsed as part of this parser: 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5167, 5158, 5159
ParserName: vimNetworkSessionMicrosoftWindowsEventFirewall
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: url_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: httpuseragent_has_any
    Type: dynamic 
    Default: dynamic([])
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: "'*'"
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  // Data tables for mapping raw values into string
  let LayerCodeTable = datatable (LayerCode:string,LayerName:string)[
                '%%14596', 'IP Packet',
                '%%14597', 'Transport',
                '%%14598', 'Forward',
                '%%14599', 'Stream',
                '%%14600', 'Datagram Data',
                '%%14601', 'ICMP Error',
                '%%14602', 'MAC 802.3',
                '%%14603', 'MAC Native',
                '%%14604', 'vSwitch',
                '%%14608', 'Resource Assignment',
                '%%14609', 'Listen',
                '%%14610', 'Receive/Accept',
                '%%14611', 'Connect',
                '%%14612', 'Flow Established',
                '%%14614', 'Resource Release',
                '%%14615', 'Endpoint Closure',
                '%%14616', 'Connect Redirect',
                '%%14617', 'Bind Redirect',
                '%%14624', 'Stream Packet'];
  let ProtocolTable = datatable (Protocol:int, NetworkProtocol: string)[
                1, 'ICMP',
                3, 'GGP',
                6, 'TCP',
                8, 'EGP',
                12, 'PUP',
                17, 'UDP',
                20, 'HMP',
                27, 'RDP',
                46, 'RSVP',
                47, 'PPTP data over GRE',
                50, 'ESP',
                51, 'AH',
                66, 'RVD',
                88, 'IGMP',
                89, 'OSPF'];
  let Directions = datatable (DirectionCode:string,NetworkDirection:string, isOutBound:bool)[
              '%%14592', 'Inbound', false,
              '%%14593', 'Outbound', true,
              '%%14594', 'Forward',false,
              '%%14595', 'Bidirectional', false,
              '%%14609', 'Listen', false];
  ///////////////////////////////////////////////////////
  // this query extract data fields from EventData column from SecurityEvent table
  ///////////////////////////////////////////////////////
  let WindowsFirewall_SecurityEvent=
    (starttime:datetime=datetime(null)
    , endtime:datetime=datetime(null)
    , srcipaddr_has_any_prefix:dynamic=dynamic([])
    , dstipaddr_has_any_prefix:dynamic=dynamic([])
    , dstportnumber:int=int(null)
    , url_has_any:dynamic=dynamic([])
    , httpuseragent_has_any:dynamic=dynamic([])
    , hostname_has_any:dynamic=dynamic([])
    , dvcaction:dynamic=dynamic([])
    , eventresult:string='*'
    , disabled:bool=false
      )
      { 
      // Event IDs between (5151 .. 5159)
      // will be extracting Event specific fields from 'EventData' field
      let SecurityEvent_5152 = 
          SecurityEvent | where not(disabled)
          | where EventID==5152
          | extend EventResult =  "Failure"
          // ***************  Prefilterring *****************************************************************
          |where (isnull(starttime) or TimeGenerated>=starttime)
            and  (isnull(endtime) or TimeGenerated<=endtime)
            and  (isnull(dstportnumber) or EventData has tostring(dstportnumber) ) 
            and  (array_length(srcipaddr_has_any_prefix)==0 
                  or has_any_ipv4_prefix(EventData ,srcipaddr_has_any_prefix)
                ) 
            and  (array_length(dstipaddr_has_any_prefix)==0 
                  or has_any_ipv4_prefix(EventData ,dstipaddr_has_any_prefix)
                ) 
            and (array_length(dvcaction)==0 or (dvcaction=='Deny') ) 
            and (array_length(url_has_any)==0)
            and (array_length(httpuseragent_has_any) ==0) // if filtering by ua - return nothing
            and (array_length(hostname_has_any)==0 )
            and (eventresult=='*' or eventresult=='Failure')
          // *************** / Prefilterring *****************************************************************
          | parse EventData with * '<Data Name="ProcessId">'ProcessId:string'</Data>'
                              '\x0d\x0a  <Data Name="Application">'Application'</Data>'
                              '\x0d\x0a  <Data Name="Direction">'DirectionCode'</Data>'
                              '\x0d\x0a  <Data Name="SourceAddress">'SourceAddress'</Data>'
                              '\x0d\x0a  <Data Name="SourcePort">'SourcePort'</Data>'
                              '\x0d\x0a  <Data Name="DestAddress">'DestAddress'</Data>'
                              '\x0d\x0a  <Data Name="DestPort">'DestPort:int'</Data>'
                              '\x0d\x0a  <Data Name="Protocol">'Protocol:int'</Data>'
                              '\x0d\x0a  <Data Name="FilterRTID">'NetworkRuleNumber'</Data>'
                              '\x0d\x0a  <Data Name="LayerName">'LayerCode'</Data>'
                              '\x0d\x0a  <Data Name="LayerRTID">'LayerRTID'</Data>'*
        ;
      let SecurityEvent_5154_5155_5158_5159 =
      SecurityEvent | where not(disabled)
          | where EventID in (5154, 5155, 5158, 5159)
          // ***************  Prefilterring *****************************************************************
          |where (array_length(dstipaddr_has_any_prefix)==0 ) 
            and  (array_length(hostname_has_any)==0 ) 
            and  (isnull(dstportnumber) ) 
            and  (isnull(starttime) or TimeGenerated>=starttime)
            and  (isnull(endtime) or TimeGenerated<=endtime)
            and  (array_length(srcipaddr_has_any_prefix)==0 
                  or has_any_ipv4_prefix(EventData ,srcipaddr_has_any_prefix)
                ) 
            and (array_length(dvcaction)==0 
                or (dvcaction=='Allow' and EventID in  (5154,5158))  
                or (dvcaction=='Deny'  and EventID !in (5154,5158))
                ) 
            and (array_length(url_has_any)==0)
            and (array_length(httpuseragent_has_any) ==0) // if filtering by ua - return nothing
          | extend EventResult = iff(EventID in (5154, 5158), "Success", "Failure")
          | extend (eventresult=='*' or EventResult==eventresult)
          // *************** / Prefilterring *****************************************************************
          | parse EventData with * '<Data Name="ProcessId">'ProcessId:string'</Data>' 
                              '\x0d\x0a  <Data Name="Application">'Application:string'</Data>'
                              '\x0d\x0a  <Data Name="SourceAddress">'SourceAddress:string'</Data>'
                              '\x0d\x0a  <Data Name="SourcePort">'SourcePort:int'</Data>'
                              '\x0d\x0a  <Data Name="Protocol">'Protocol:int'</Data>'
                              '\x0d\x0a  <Data Name="FilterRTID">'NetworkRuleNumber'</Data>'
                              '\x0d\x0a  <Data Name="LayerName">'LayerCode'</Data>'
                              '\x0d\x0a  <Data Name="LayerRTID">'LayerRTID'</Data>'*
          | extend DirectionCode = "%%14609"
          ;
      let SecurityEvent_5156_5157 =
          SecurityEvent | where not(disabled)
          | where EventID in (5156, 5157)
           | extend EventResult = iff(EventID == 5156, "Success", "Failure")
          // ***************  Prefilterring *****************************************************************
          | where (isnull(starttime) or TimeGenerated>=starttime)
            and  (isnull(endtime) or TimeGenerated<=endtime)
            and  (array_length(srcipaddr_has_any_prefix)==0 
                  or has_any_ipv4_prefix(EventData ,srcipaddr_has_any_prefix)
                )
            and  (array_length(dstipaddr_has_any_prefix)==0 
                  or has_any_ipv4_prefix(EventData ,dstipaddr_has_any_prefix)
                )
            and  (isnull(dstportnumber) or EventData has tostring(dstportnumber) ) 
            and (array_length(dvcaction)==0 
                or (dvcaction=='Allow' and EventID == 5156)  
                or (dvcaction=='Deny'  and EventID <> 5156)
                )
            and (array_length(url_has_any)==0 )
            and (isnull(httpuseragent_has_any) )
            and (array_length(hostname_has_any)==0 )
            and (eventresult=='*' or EventResult==eventresult) 
          // *************** / Prefilterring *****************************************************************
          | parse EventData with * '<Data Name="ProcessID">'ProcessID:string'</Data>'
              '\x0d\x0a  <Data Name="Application">'Application'</Data>'
              '\x0d\x0a  <Data Name="Direction">'DirectionCode'</Data>'
              '\x0d\x0a  <Data Name="SourceAddress">'SourceAddress'</Data>'
              '\x0d\x0a  <Data Name="SourcePort">'SourcePort'</Data>'
              '\x0d\x0a  <Data Name="DestAddress">'DestAddress'</Data>'
              '\x0d\x0a  <Data Name="DestPort">'DestPort:int'</Data>'
              '\x0d\x0a  <Data Name="Protocol">'Protocol:int'</Data>'
              '\x0d\x0a  <Data Name="FilterRTID">'NetworkRuleNumber'</Data>'
              '\x0d\x0a  <Data Name="LayerName">'LayerCode'</Data>'
              '\x0d\x0a  <Data Name="LayerRTID">'LayerRTID'</Data>'
              '\x0d\x0a  <Data Name="RemoteUserID">'RemoteUserID'</Data>'
              '\x0d\x0a  <Data Name="RemoteMachineID">'RemoteMachineID'</Data>'*
              | project-away EventData;
      union SecurityEvent_5152, SecurityEvent_5156_5157, SecurityEvent_5154_5155_5158_5159
      | lookup Directions on DirectionCode
      | extend
            SrcAppName = iff(isOutBound, Application, ""),
            DstAppName = iff(not(isOutBound), Application, ""),
            SrcIpAddr = iff(isOutBound, DestAddress, SourceAddress),
            DstIpAddr = iff(not(isOutBound), SourceAddress, DestAddress),
            SrcHostId = iff(isOutBound, RemoteMachineID, ""),
            DstHostId = iff(not(isOutBound), RemoteMachineID, ""),
            SrcPortNumber = iff(isOutBound, toint(DestPort), toint(SourcePort)),
            DstPortNumber = iff(not(isOutBound), toint(SourcePort), toint(DestPort)),
            SrcProcessId =  iff(isOutBound, tostring(ProcessId), ""),
            DstProcessId =  iff(not(isOutBound), tostring(ProcessId), ""),
            DstUserId = iff(isOutBound, RemoteUserID, ""),
            SrcUserId = iff(not(isOutBound), RemoteUserID, "")
        // *************** Postfilterring *****************************************************************
          | where  (isnull(dstportnumber) or DestPort == dstportnumber ) 
              and  (array_length(srcipaddr_has_any_prefix)==0 
                    or has_any_ipv4_prefix(SrcIpAddr ,srcipaddr_has_any_prefix)
                  ) 
              and (array_length(dstipaddr_has_any_prefix)==0 
                    or has_any_ipv4_prefix(DstIpAddr,dstipaddr_has_any_prefix)
                  ) 
          // *************** / Postfilterring *****************************************************************
      };
  //////////////////////////////////////////////////////
  // this query extract the data from WindowsEvent table
  //////////////////////////////////////////////////////
  let WindowsFirewall_WindowsEvent=(starttime:datetime=datetime(null), endtime:datetime=datetime(null)
  , srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null)
  , url_has_any:dynamic=dynamic([]), httpuseragent_has_any:dynamic=dynamic([])
  , hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]),eventresult:string='*', disabled:bool=false
   ){   
      WindowsEvent | where not(disabled)
      | where EventID between (5150 .. 5159)
      | extend EventResult = iff(EventID in (5154, 5156, 5158), "Success", "Failure")
      // ***************  Prefilterring *****************************************************************
      | where (isnull(starttime) or TimeGenerated>=starttime) 
              and (isnull(endtime) or TimeGenerated<=endtime) 
              and (isnull(dstportnumber) or EventData has tostring(dstportnumber)) 
              and (array_length(srcipaddr_has_any_prefix)==0 
                      or has_any_ipv4_prefix(EventData,srcipaddr_has_any_prefix)
                   ) 
              and (array_length(dstipaddr_has_any_prefix)==0 
                      or has_any_ipv4_prefix(EventData,dstipaddr_has_any_prefix)
                   ) 
              and (array_length(hostname_has_any)==0 ) 
              and (isnull(httpuseragent_has_any))
              and (array_length(url_has_any)==0 )
              and (array_length(dvcaction)==0  ) 
              and (eventresult=='*' or EventResult==eventresult)
      // *************** Prefilterring *****************************************************************
            | extend 
                EventSeverity=tostring(EventData.Severity),
                LayerCode = tostring(EventData.LayerName),
                NetworkRuleNumber = tostring(EventData.FilterRTID),
                Protocol = toint(EventData.Protocol),
                DirectionCode = iff(EventID in (5154, 5155, 5158, 5159), "%%14609",tostring(EventData.Direction))
            | lookup Directions on DirectionCode 
            | extend  SrcAppName = iff(isOutBound, tostring(EventData.Application), ""),
                      DstAppName = iff(not(isOutBound), tostring(EventData.Application), ""),
                      SrcIpAddr = iff(isOutBound, tostring(EventData.DestAddress), tostring(EventData.SourceAddress)),
                      DstIpAddr = iff(not(isOutBound), tostring(EventData.SourceAddress), tostring(EventData.DestAddress)),
                      SrcHostId = iff(isOutBound, tostring(EventData.RemoteMachineID), ""),
                      DstHostId = iff(not(isOutBound), tostring(EventData.RemoteMachineID), ""),
                      SrcPortNumber = iff(isOutBound, toint(EventData.DestPort), toint(EventData.SourcePort)),
                      DstPortNumber = iff(not(isOutBound), toint(EventData.SourcePort), toint(EventData.DestPort)),
                      SrcProcessId =  iff(isOutBound, tostring(EventData.ProcessId), ""),
                      DstProcessId =  iff(not(isOutBound), tostring(EventData.ProcessId), ""),
                      DstUserId = iff(isOutBound, tostring(EventData.RemoteUserID), ""),
                      SrcUserId = iff(not(isOutBound), tostring(EventData.RemoteUserID), "")
            | project-away EventData
          // *************** Postfilterring *****************************************************************
          | where  (isnull(dstportnumber) or DstPortNumber == dstportnumber ) 
              and  (array_length(srcipaddr_has_any_prefix)==0 
                    or has_any_ipv4_prefix(SrcIpAddr ,srcipaddr_has_any_prefix)
                  ) 
              and (array_length(dstipaddr_has_any_prefix)==0 
                    or has_any_ipv4_prefix(DstIpAddr,dstipaddr_has_any_prefix)
                  ) 
          // *************** / Postfilterring *****************************************************************
        };
  // Main query -> outputs both schemas as one normalized table
  union isfuzzy=true
    WindowsFirewall_SecurityEvent  (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, dstportnumber, url_has_any, httpuseragent_has_any, hostname_has_any, dvcaction, disabled)
    , WindowsFirewall_WindowsEvent (starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, dstportnumber, url_has_any, httpuseragent_has_any, hostname_has_any, dvcaction, disabled)
      | extend 
              DvcAction = iff(EventID in (5154, 5156, 5158), "Allow", "Deny"),
              DvcOs = 'Windows',
              DstAppType = "Process",
              DstUserType = "SID",
              SrcAppType = "Process",
              SrcUserType = "SID",
              EventType = "NetworkSession",
              EventSchema = "NetworkSession",
              EventSchemaVersion="0.2.0",
              EventCount=toint(1),
              EventVendor = "Microsoft",
              EventProduct = "WindowsFirewall",
              EventStartTime = TimeGenerated,
              EventEndTime = TimeGenerated,
              EventOriginalUid = EventOriginId,
              EventSeverity = iff(EventID  in (5154, 5156, 5158), "Informational", "Low")
      | project-rename DvcHostname = Computer
      | lookup LayerCodeTable on LayerCode
      | lookup ProtocolTable on Protocol
      | project-away LayerCode, DirectionCode, Protocol