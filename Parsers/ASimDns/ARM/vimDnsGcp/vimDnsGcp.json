{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string"
    },
    "location": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimDnsGcp",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "GCP DNS Query Parameterized Parser",
            "category": "Security",
            "FunctionAlias": "vimDnsGcp",
            "query": "let DNSQuery_GcpDns=(\n  starttime:datetime=datetime(null), endtime:datetime=datetime(null)\n  , srcipaddr:string='*'\n  , domain_has_any:dynamic=dynamic([]) \n  , responsecodename:string='*', response_has_ipv4:string='*'\n  , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'\n  , disabled:bool=false\n){\n    GCP_DNS_CL | where not(disabled)\n  | where resource_type_s == \"dns_query\"\n  //  Pre-parsing filtering:\n  | where\n  (eventtype in ('lookup', 'Query')) // -- for now we support only lookup events\n    and (isnull(starttime) or TimeGenerated >= starttime)\n    and (isnull(endtime) or TimeGenerated <= endtime)\n    and (srcipaddr=='*' or has_ipv4(payload_sourceIP_s, srcipaddr))\n    and (array_length(domain_has_any) ==0 or payload_queryName_s has_any (domain_has_any))\n    and (responsecodename=='*' or payload_responseCode_s == responsecodename)\n    and (response_has_ipv4=='*' or has_ipv4(payload_rdata_s,response_has_ipv4) )\n    and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(payload_rdata_s, response_has_any_prefix))\n  // *****************************************************************\n  | project-rename\n      DnsQuery=payload_queryName_s, \n      DnsQueryTypeName=payload_queryType_s,\n      DnsResponseName=payload_rdata_s, \n      EventResultDetails=payload_responseCode_s,\n      NetworkProtocol=payload_protocol_s, \n      SrcIpAddr=payload_sourceIP_s,\n      EventOriginalUid=insert_id_s,\n      EventSeverity=severity_s    \n  | extend\n      EventCount=int(1),\n      EventProduct='Cloud DNS',\n      EventVendor='GCP',\n      EventSchema='Dns',\n      EventSchemaVersion=\"0.1.3\",\n      Dvc=\"GCPDNS\" ,\n      EventType = iif (resource_type_s == \"dns_query\", \"Query\", resource_type_s),\n      EventResult=iff(EventResultDetails=~'NOERROR','Success','Failure'),\n      EventSubType='response',\n      EventEndTime=todatetime(timestamp_t)\n  | extend\n      EventStartTime = EventEndTime,\n      EventResult = iff (EventResultDetails=~'NOERROR','Success','Failure')\n // -- Aliases\n  | extend \n      DnsResponseCodeName=EventResultDetails, \n      Domain=DnsQuery,\n      IpAddr=SrcIpAddr,\n      Src=SrcIpAddr\n // Backward Computability\n  | extend\n      Query=DnsQuery,\n      ResponseCodeName=DnsResponseCodeName,\n      QueryTypeName=DnsQueryTypeName\n  };\n  DNSQuery_GcpDns (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\n",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr:string='*', domain_has_any:dynamic=dynamic([]), responsecodename:string='*', response_has_ipv4:string='*', response_has_any_prefix:dynamic=dynamic([]), eventtype:string='Query', disabled:bool=False"
          }
        }
      ]
    }
  ]
}