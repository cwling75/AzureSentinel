	{
		"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"metadata": {
			"comments": "This playbook uses the Farsight DNSDB connector to automatically enrich incidents generated by Sentinel. Learn more about the integration via the https://docs.microsoft.com/connectors/farsightdnsdb/ or visit https://www.farsightsecurity.com/about-farsight-security/contacts/ to request a trial key.",
			"author": "Henry Stern, Farsight Security, Inc."
		},
		"parameters": {
			"PlaybookName": {
				"defaultValue": "DNSDB_Historical_Hosts",
				"type": "string"
			},
			"UserName": {
				"defaultValue": "<username>@<domain>",
				"type": "string"
			}
		},
		"variables": {
			"DNSDBApiKey": "[concat('farsightdnsdb-', parameters('PlaybookName'))]",
			"AzureSentinelConnectionName": "[concat('azuresentinel-', parameters('PlaybookName'))]"
		},
		"resources": [
			{
				"type": "Microsoft.Web/connections",
				"apiVersion": "2016-06-01",
				"name": "[variables('AzureSentinelConnectionName')]",
				"location": "[resourceGroup().location]",
				"kind": "V1",
				"properties": {
					"displayName": "[variables('AzureSentinelConnectionName')]",
					"customParameterValues": {},
					"parameterValueType": "Alternative",
					"api": {
						"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
					}
				}
			},
			{
				"type": "Microsoft.Web/connections",
				"apiVersion": "2016-06-01",
				"name": "[variables('DNSDBApiKey')]",
				"location": "[resourceGroup().location]",
				"properties": {
					"displayName": "[parameters('UserName')]",
					"customParameterValues": {},
					"api": {
						"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/farsightdnsdb')]"
					}
				}
			},
			{
				"type": "Microsoft.Logic/workflows",
				"apiVersion": "2017-07-01",
				"name": "[parameters('PlaybookName')]",
				"location": "[resourceGroup().location]",
				"identity": {
					"type": "SystemAssigned"
				},
				"dependsOn": [
					"[resourceId('Microsoft.Web/connections', variables('DNSDBApiKey'))]",
					"[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
				],
				"properties": {
					"state": "Enabled",
					"definition": {
						"$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
						"contentVersion": "1.0.0.0",
						"parameters": {
							"$connections": {
								"defaultValue": {},
								"type": "Object"
							}
						},
						"triggers": {
							"When_Azure_Sentinel_incident_creation_rule_was_triggered": {
								"type": "ApiConnectionWebhook",
								"inputs": {
									"body": {
										"callback_url": "@{listCallbackUrl()}"
									},
									"host": {
										"connection": {
											"name": "@parameters('$connections')['azuresentinel']['connectionId']"
										}
									},
									"path": "/incident-creation"
								}
							}
						},
						"actions": {
							"Co_Located_IPs": {
								"runAfter": {
									"RDATA_Unique_hosts_Array": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "co_located_ips",
											"type": "array"
										}
									]
								}
							},
							"End_Date_epoch": {
								"runAfter": {
									"Get1970TimestampInTicks": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "end_date_epoch",
											"type": "integer",
											"value": "@div(sub(variables('end_date_ticks_time'),variables('ticks_1970_time')),10000000)"
										}
									]
								}
							},
							"Entities_-_Get_IPs": {
								"runAfter": {
									"Unique_Co_Located_IPs": [
										"Succeeded"
									]
								},
								"type": "ApiConnection",
								"inputs": {
									"body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
									"host": {
										"connection": {
											"name": "@parameters('$connections')['azuresentinel']['connectionId']"
										}
									},
									"method": "post",
									"path": "/entities/ip"
								}
							},
							"For_each": {
								"foreach": "@body('Entities_-_Get_IPs')?['IPs']",
								"actions": {
									"Add_comment_to_incident_(V3)": {
										"runAfter": {
											"Join": [
												"Succeeded"
											]
										},
										"type": "ApiConnection",
										"inputs": {
											"body": {
												"incidentArmId": "@triggerBody()?['object']?['id']",
												"message": "<p><span style=\"font-size: 24px\">DNSDB Historical Hosts for IP: </span><span style=\"font-size: 24px\">@{items('For_each')?['Address']}</span><span style=\"font-size: 24px\"> (From Date:</span><span style=\"font-size: 24px\">@{variables('start_date')}</span><span style=\"font-size: 24px\">, To Date:</span><span style=\"font-size: 24px\">@{variables('end_date_epoch')}</span><span style=\"font-size: 24px\">)</span><span style=\"font-size: 16px\"><br>\n</span><span style=\"font-size: 16px\">@{body('Join')}</span><span style=\"font-size: 16px\"></span></p>"
											},
											"host": {
												"connection": {
													"name": "@parameters('$connections')['azuresentinel']['connectionId']"
												}
											},
											"method": "post",
											"path": "/Incidents/Comment"
										}
									},
									"For_each_RDATA_": {
										"foreach": "@body('RData_Lookup_with_RRType')",
										"actions": {
											"Append_to_array_variable": {
												"runAfter": {},
												"type": "AppendToArrayVariable",
												"inputs": {
													"name": "rdata_hosts",
													"value": "@items('For_each_RDATA_')?['rrname']"
												}
											}
										},
										"runAfter": {
											"Set_Rdata_Hosts_to_Empty": [
												"Succeeded"
											]
										},
										"type": "Foreach",
										"runtimeConfiguration": {
											"concurrency": {
												"repetitions": 1
											}
										}
									},
									"Get_Uniquie_Hosts": {
										"runAfter": {
											"Set_Unique_Hosts_to_Empty": [
												"Succeeded"
											]
										},
										"type": "SetVariable",
										"inputs": {
											"name": "rdata_hosts_unique",
											"value": "@union(variables('rdata_hosts'),variables('rdata_hosts'))"
										}
									},
									"Join": {
										"runAfter": {
											"Get_Uniquie_Hosts": [
												"Succeeded"
											]
										},
										"type": "Join",
										"inputs": {
											"from": "@variables('rdata_hosts_unique')",
											"joinWith": ",\n"
										}
									},
									"RData_Lookup_with_RRType": {
										"runAfter": {},
										"type": "ApiConnection",
										"inputs": {
											"host": {
												"connection": {
													"name": "@parameters('$connections')['farsightdnsdb']['connectionId']"
												}
											},
											"method": "get",
											"path": "/lookup/rdata/@{encodeURIComponent('ip')}/@{encodeURIComponent(items('For_each')?['Address'])}/ANY",
											"queries": {
												"limit": 10,
												"time_first_before": "@variables('end_date_epoch')",
												"time_last_after": "@variables('start_date_epoch')"
											}
										}
									},
									"Set_Rdata_Hosts_to_Empty": {
										"runAfter": {
											"RData_Lookup_with_RRType": [
												"Succeeded"
											]
										},
										"type": "SetVariable",
										"inputs": {
											"name": "rdata_hosts",
											"value": []
										}
									},
									"Set_Unique_Hosts_to_Empty": {
										"runAfter": {
											"For_each_RDATA_": [
												"Succeeded"
											]
										},
										"type": "SetVariable",
										"inputs": {
											"name": "rdata_hosts_unique",
											"value": []
										}
									}
								},
								"runAfter": {
									"Entities_-_Get_IPs": [
										"Succeeded"
									]
								},
								"type": "Foreach",
								"runtimeConfiguration": {
									"concurrency": {
										"repetitions": 1
									}
								}
							},
							"Get1970TimestampInTicks": {
								"runAfter": {
									"Lookup_Start_Date_Ticks_Time": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "ticks_1970_time",
											"type": "integer",
											"value": "@ticks('1970-01-01T00:00:00Z')"
										}
									]
								}
							},
							"Incident_Date": {
								"runAfter": {},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "end_date",
											"type": "string",
											"value": "@triggerBody()?['object']?['properties']?['createdTimeUtc']"
										}
									]
								}
							},
							"Incident_Date_Ticks_Time": {
								"runAfter": {
									"Lookup_Start_Date(-90_of_incident_date)": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "end_date_ticks_time",
											"type": "integer",
											"value": "@ticks(variables('end_date'))"
										}
									]
								}
							},
							"Lookup_Start_Date(-90_of_incident_date)": {
								"runAfter": {
									"Incident_Date": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "start_date",
											"type": "string",
											"value": "@{addDays(variables('end_date'),-90)}"
										}
									]
								}
							},
							"Lookup_Start_Date_Ticks_Time": {
								"runAfter": {
									"Incident_Date_Ticks_Time": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "start_date__ticks_time",
											"type": "integer",
											"value": "@ticks(variables('start_date'))"
										}
									]
								}
							},
							"RDATA_Unique_hosts_Array": {
								"runAfter": {
									"RDATA_hosts_Array": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "rdata_hosts_unique",
											"type": "array"
										}
									]
								}
							},
							"RDATA_hosts_Array": {
								"runAfter": {
									"Start_Date_epoch": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "rdata_hosts",
											"type": "array"
										}
									]
								}
							},
							"Start_Date_epoch": {
								"runAfter": {
									"End_Date_epoch": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "start_date_epoch",
											"type": "integer",
											"value": "@div(sub(variables('start_date__ticks_time'),variables('ticks_1970_time')),10000000)"
										}
									]
								}
							},
							"Unique_Co_Located_IPs": {
								"runAfter": {
									"Co_Located_IPs": [
										"Succeeded"
									]
								},
								"type": "InitializeVariable",
								"inputs": {
									"variables": [
										{
											"name": "co_located_ips_unique",
											"type": "array"
										}
									]
								}
							}
						},
						"outputs": {}
					},
					"parameters": {
						"$connections": {
							"value": {
								"azuresentinel": {
									"connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
									"connectionName": "[variables('AzureSentinelConnectionName')]",
									"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
									"connectionProperties": {
										"authentication": {
											"type": "ManagedServiceIdentity"
										}
									}
								},
								"farsightdnsdb": {
									"connectionId": "[resourceId('Microsoft.Web/connections', variables('DNSDBApiKey'))]",
									"connectionName": "[variables('DNSDBApiKey')]",
									"id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/farsightdnsdb')]"
								}
							}
						}
					}
				}
			}
		]
	}
