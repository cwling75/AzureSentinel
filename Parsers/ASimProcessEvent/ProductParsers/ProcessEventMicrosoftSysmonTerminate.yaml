Parser:
  Title: ASIM Sysmon Process Termination Event Parser
  Version: '0.2'
  LastUpdated: Aug 30, 2021
Product:
  Name: Microsoft Windows Events Sysmon
Normalization:
  Schema: ProcessEvent
  Version: '0.1.0'
References:
- Title: ASIM Process Schema
  Link: https://aka.ms/AzSentinelProcessEventsDoc
- Title: ASIM
  Link: https:/aka.ms/AzSentinelNormalization
Description: ASIM Sysmon/Event Process Termination Event Parser (event number 5) from "Event" and "WindowsEvent" tables.
ParserName: vimProcessTerminateMicrosoftSysmon
ParserQuery: | 
            // this is the parser for sysmon from Event table
            let ParsedProcessEvent_Event=(){
                Event 
                | where Source == "Microsoft-Windows-Sysmon" and EventID==5
                | parse EventData with * '<Data Name="RuleName">'RuleName'</Data>'
                        '<Data Name="UtcTime">'UtcTime'</Data>'
                        '<Data Name="ProcessGuid">{'ProcessGuid'}</Data>'
                        '<Data Name="ProcessId">'ProcessId:string'</Data>'
                        '<Data Name="Image">'Image'</Data>'*
                | parse EventData with * '<Data Name="User">'ActorUsername '</Data>' *
                | extend 
                        EventType = "ProcessTerminated",
                        EventStartTime = todatetime(TimeGenerated),
                        EventEndTime = todatetime(TimeGenerated),
                        EventCount = int(1),
                        EventVendor = "Microsoft",
                        EventSchemaVersion = "0.1.0",
                        EventOriginalType=tostring(EventID),
                        EventProduct = "Sysmon",
                        EventResult = 'Success',
                        DvcOs = "Windows"
                | project-rename
                        DvcHostname = Computer,
                        TargetProcessName = Image,
                        TargetProcessId = ProcessId
                | extend
                        ActorUsernameType = iff(isnotempty(ActorUsername),'Windows', ''),
                        TargetProcessGuid = ProcessGuid,
                        //***** Aliases ******
                        User = ActorUsername,
                        Process = TargetProcessName,
                        Dvc = DvcHostname
                | project-away EventData, ParameterXml
                };
                let ParsedProcessEvent_WindowsEvent=(){
                WindowsEvent 
                | where Provider == "Microsoft-Windows-Sysmon" and EventID==5
                | extend 
                        EventType = "ProcessTerminated",
                        EventStartTime = todatetime(TimeGenerated),
                        EventEndTime = todatetime(TimeGenerated),
                        EventCount = int(1),
                        EventVendor = "Microsoft",
                        EventSchemaVersion = "0.1.0",
                        EventOriginalType=tostring(EventID),
                        EventProduct = "Sysmon",
                        EventResult = 'Success',
                        DvcOs = "Windows",
                        ActorUsernameType = "Windows",
                        ActorUsername = tostring(EventData.User),
                        TargetProcessName = tostring(EventData.Image),
                        TargetProcessId = tostring(EventData.ProcessId),
                        TargetProcessGuid = tostring(EventData.ProcessGuid)
                | project-rename
                        DvcHostname = Computer
                | extend
                        ActorUsernameType = iff(isnotempty(ActorUsername),'Windows', ''),
                        //***** Aliases ******
                        User = ActorUsername,
                        Process = TargetProcessName,
                        Dvc = DvcHostname
                };union isfuzzy=true ParsedProcessEvent_Event,
                                        ParsedProcessEvent_WindowsEvent   
