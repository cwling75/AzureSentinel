{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string"
    },
    "location": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimNetworkSessionLinuxSysmon",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "ASIM Sysmon for Linux Network Session Parser",
            "category": "Security",
            "FunctionAlias": "vimNetworkSessionLinuxSysmon",
            "query": "let DirectionNetworkEvents =\n    Syslog | where not(disabled)\n    | where SyslogMessage has_all ('<Provider Name=\"Linux-Sysmon\"', '<EventID>3</EventID>')\n    | project-away ProcessName, ProcessID\n    // ***************  Prefilterring *****************************************************************\n    | where  (eventresult=='*' or eventresult=='Success')\n       and (array_length(httpuseragent_has_any) ==0) // if filtering by ua - return nothing\n       and (array_length(dvcaction) ==0  )     /// if filtered by action return nothing\n       and (array_length(url_has_any)==0)\n        and (isnull(starttime) or TimeGenerated>=starttime) \n        and (isnull(endtime) or TimeGenerated<=endtime) \n        and (array_length(srcipaddr_has_any_prefix)==0 \n              or has_any_ipv4_prefix(SyslogMessage,srcipaddr_has_any_prefix)\n            ) \n        and (array_length(dstipaddr_has_any_prefix)==0 \n              or has_any_ipv4_prefix(SyslogMessage,dstipaddr_has_any_prefix)\n            ) \n        and (array_length(hostname_has_any)==0 \n              or SyslogMessage has_any(hostname_has_any)) \n        and (isnull(dstportnumber) or SyslogMessage has (tostring(dstportnumber))) \n    // *************** / Prefilterring ***************************************************************\n    | parse SyslogMessage with * '<Data Name=\"SourceIp\">' SrcIpAddr:string '</Data>' *\n    | where (array_length(srcipaddr_has_any_prefix)==0 \n              or has_any_ipv4_prefix(SrcIpAddr,srcipaddr_has_any_prefix)\n            ) \n    | extend outbound = (SrcIpAddr == HostIP or SrcIpAddr in ('127.0.0.1', '0.0.0.0'))\n;\nlet parser = (T: (SyslogMessage: string)) {\n  T \n  | parse SyslogMessage with \n      *\n      '<EventRecordID>' EventOriginalUid:string '</EventRecordID>'\n      *\n      '<Computer>' SysmonComputer:string '</Computer>'\n      *\n      '<Data Name=\"RuleName\">' RuleName:string '</Data>'\n      '<Data Name=\"UtcTime\">' EventEndTime:datetime '</Data>'\n      '<Data Name=\"ProcessGuid\">{' ProcessGuid:string '}</Data>'\n      '<Data Name=\"ProcessId\">' ProcessId:string '</Data>'\n      '<Data Name=\"Image\">' Process:string '</Data>'\n      '<Data Name=\"User\">' User:string '</Data>'\n      '<Data Name=\"Protocol\">' Protocol:string '</Data>' // -- source is lowercase\n      '<Data Name=\"Initiated\">' Initiated:bool '</Data>' \n      '<Data Name=\"SourceIsIpv6\">' SourceIsIpv6:bool '</Data>'\t\t\n      '<Data Name=\"SourceIp\">' * '</Data>'\n      '<Data Name=\"SourceHostname\">' SrcHostname:string '</Data>'\n      '<Data Name=\"SourcePort\">' SrcPortNumber:int '</Data>'\n      '<Data Name=\"SourcePortName\">' SrcPortName:string '</Data>'\n      '<Data Name=\"DestinationIsIpv6\">' DestinationIsIpv6:bool '</Data>'\n      '<Data Name=\"DestinationIp\">' DstIpAddr:string '</Data>'\n      '<Data Name=\"DestinationHostname\">' DstHostname:string '</Data>'\n      '<Data Name=\"DestinationPort\">' DstPortNumber:int '</Data>'\n      '<Data Name=\"DestinationPortName\">' DstPortName:string '</Data>'\n      *\n};\nlet OutboundNetworkEvents = \n  DirectionNetworkEvents\n  | where outbound\n  | invoke parser ()\n  // *************** Postfilterring ***************************************************************\n  | where \n          (array_length(dstipaddr_has_any_prefix)==0 or has_any_ipv4_prefix(DstIpAddr, dstipaddr_has_any_prefix))\n      and (array_length(srcipaddr_has_any_prefix)==0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n      and (array_length(hostname_has_any)==0 or DstHostname has_any (hostname_has_any) )\n      and  (isnull(dstportnumber) or DstPortNumber ==dstportnumber)\n  // *************** Postfilterring ***************************************************************\n  | extend\n    SrcUsernameType = 'Simple',\n    SrcUsername = User,\n    SrcProcessId = ProcessId, \n    SrcProcessGuid = ProcessGuid,\n    SrcProcessName = Process,\n    SrcAppName = Process,\n    SrcAppType = 'Process'\n  | project-away SyslogMessage\n;\n  let InboundNetworkEvents = \n      DirectionNetworkEvents\n      | where not(outbound)\n      | invoke parser ()\n      // *************** Postfilterring ***************************************************************\n      | where \n          (array_length(dstipaddr_has_any_prefix)==0 or has_any_ipv4_prefix(DstIpAddr, dstipaddr_has_any_prefix))\n      and (array_length(srcipaddr_has_any_prefix)==0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))\n      and (array_length(hostname_has_any)==0 or DstHostname has_any (hostname_has_any) )\n      and  (isnull(dstportnumber) or DstPortNumber ==dstportnumber)\n      // *************** Postfilterring ***************************************************************\n      | extend\n      DstUsernameType = 'Simple',\n      DstUsername = User,\n      DstProcessId = ProcessId, \n      DstProcessGuid = ProcessGuid,\n      DstProcessName = Process,\n      DstAppName = Process,\n      DstAppType = 'Process' \n      | project-away SyslogMessage\n  ;\n  let SysmonForLinuxNetwork=\n      union OutboundNetworkEvents, InboundNetworkEvents\n      | extend \n          EventType = 'NetworkSession',\n          EventStartTime = EventEndTime,\n          EventCount = int(1),\n          EventVendor = 'Microsoft',\n          EventSchemaVersion = '0.2.0',\n          EventSchema = 'NetworkSession', \n          EventProduct = 'Sysmon For Linux',\n          EventResult = 'Success',\n          EventSeverity = 'Informational',\n          DvcOs = 'Linux',\n          Protocol = toupper(Protocol),\n          EventOriginalType = '3' // Set with a constant value to avoid parsing\n      | project-rename \n          DvcIpAddr = HostIP,\n          DvcHostname = SysmonComputer\n      | extend // aliases\n          Dvc = DvcHostname,\n          IpAddr = SrcIpAddr,\n          Src = SrcIpAddr,\n          Dst = DstIpAddr\n  ;\n  SysmonForLinuxNetwork ",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), url_has_any:dynamic=dynamic([]), httpuseragent_has_any:dynamic=dynamic([]), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), disabled:bool=False"
          }
        }
      ]
    }
  ]
}