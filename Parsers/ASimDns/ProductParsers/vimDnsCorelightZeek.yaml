Parser:
  Title: DNS activity ASIM filtering parser for Corelight Zeek 
  Version: '0.2'
  LastUpdated: Nov 11 2021
Product:
  Name: Corelight Zeek
Normalization:
  Schema: Dns
  Version: '0.1.3'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
 This ASIM parser supports filtering and normalizing Corelight Zeek DNS logs to the ASIM DNS activity normalized schema.
ParserName: vimDnsCorelightZeek
EquivalentBuiltInParser: _Im_Dns_CorelightZeek
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr
    Type: string
    Default: '*'
  - Name: domain_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: responsecodename
    Type: string
    Default: '*'
  - Name: response_has_ipv4
    Type: string
    Default: '*'
  - Name: response_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: 'Query'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let DNSQuery_CorelightZeek=(
    starttime:datetime=datetime(null), endtime:datetime=datetime(null)
    , srcipaddr:string='*'
    , domain_has_any:dynamic=dynamic([]) 
    , responsecodename:string='*', response_has_ipv4:string='*'
    , response_has_any_prefix:dynamic=dynamic([]) , eventtype:string='Query'
    , disabled:bool=false
    ){
    Corelight_CL | where not(disabled)
    | where log_file_s has "dns"
    //  Pre-parsing filtering:
    | where
      (eventtype in~ ('lookup', 'Query'))
      and (isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime) or TimeGenerated <= endtime)
      and (srcipaddr=='*' or has_ipv4(Message, srcipaddr))
      and (array_length(domain_has_any) ==0 or Message has_any (domain_has_any))
      and (responsecodename=='*' or Message has responsecodename)
      and (response_has_ipv4=='*' or has_ipv4(Message,response_has_ipv4) )
      and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(Message, response_has_any_prefix))
    // *****************************************************************
    | extend data = todynamic(Message)
    // Post-filtering accurately now that message is parsed
    | where
         (srcipaddr=="*" or srcipaddr==data.["id.orig_h"])
          and (array_length(domain_has_any) ==0 or data.query has_any (domain_has_any))
          and (responsecodename=="*" or data.rcode_name has responsecodename)
          and (response_has_ipv4=='*' or has_ipv4(data.answers,response_has_ipv4) )
          and (array_length(response_has_any_prefix) == 0 or has_any_ipv4_prefix(data.answers, response_has_any_prefix))
    | extend 
        EventCount=int(1),
        EventProduct="Zeek",
        EventVendor="Corelight",
        EventSchema = "Dns",
        EventSchemaVersion="0.1.3",
        Dvc="Zeek",
        EventType="Query",
        EventSubType='response', // ?? rejected?
        EventEndTime= todatetime(data.ts),
        EventOriginalUid = tostring(data.uid),
        SrcIpAddr = tostring (data.["id.orig_h"]),
        SrcPortNumber = toint (data.["id.orig_p"]),
        DstIpAddr = tostring (data.["id.dest_h"]),
        DstPortNumber = toint (data.["id.dest_p"]),
        NetworkProtocol = tostring(data.proto),
        TransactionIdHex = tohex(toint(data.trans_id)), 
        DnsQuery = tostring(data.query),
        DnsResponseCode = toint(data.rcode),
        EventResultDetails = tostring (data.rcode_name),
        DnsFlagsAuthoritative = tobool(data.AA),
        DnsFlagsTruncated = tobool(data.TC),
        DnsFlagsRecursionDesired = tobool(data.RD),
        DnsFlagsZ = tobool(data.Z),
        DnsQueryClassName =tostring(data.qclass_name), 
        DnsQueryClass = toint(data.qclass),
        DnsQueryTypeName =tostring(data.qtype_name), 
        DnsQueryType = toint(data.qtype),
        DnsNetworkDuration = toint(data.rtt),
        DnsResponseName = tostring(pack ('answers', data.answers, 'ttls', data.TTLs, 'authoritative ', data.auth, 'additional', data.addl))    | extend
        EventStartTime = EventEndTime,
        EventResult = iff (EventResultDetails=~'NOERROR','Success','Failure')
    // Aliases
    | extend 
        DnsResponseCodeName=EventResultDetails, 
        Domain=DnsQuery,
        IpAddr=SrcIpAddr,
        Src=SrcIpAddr,
        Dst=DstIpAddr,
        Duration=DnsNetworkDuration
    // Backward Compatibility
    | extend
        Query=DnsQuery,
        QueryType=DnsQueryType,
        ResponseCodeName=DnsResponseCodeName,
        QueryTypeName=DnsQueryTypeName
    };
    DNSQuery_CorelightZeek (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)
