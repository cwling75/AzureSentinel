{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string"
    },
    "location": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "imAuthentication",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "ASIM Source Agnostic Authentication Parser",
            "category": "Security",
            "FunctionAlias": "imAuthentication",
            "query": "let Generic=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string=\"*\"){\nlet DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'imAuthentication') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser);\nlet imAuthenticationDisabled=toscalar('imAuthentication' in (DisabledParsers) or 'Any' in (DisabledParsers)); \nunion isfuzzy=true\n    vimAuthenticationEmpty\n  , vimAuthenticationAADManagedIdentitySignInLogs   (starttime, endtime, targetusername_has, (imAuthenticationDisabled or('vimAuthenticationAADManagedIdentitySignInLogs'      in (DisabledParsers) )))\n  , vimAuthenticationAADNonInteractiveUserSignInLogs(starttime, endtime, targetusername_has, (imAuthenticationDisabled or('vimAuthenticationAADNonInteractiveUserSignInLogs'   in (DisabledParsers) )))\n  , vimAuthenticationAADServicePrincipalSignInLogs  (starttime, endtime, targetusername_has, (imAuthenticationDisabled or('vimAuthenticationAADServicePrincipalSignInLogs'     in (DisabledParsers) )))\n  , vimAuthenticationSigninLogs                     (starttime, endtime, targetusername_has, (imAuthenticationDisabled or('vimAuthenticationSigninLogs'                        in (DisabledParsers) )))\n  , vimAuthenticationAWSCloudTrail                  (starttime, endtime, targetusername_has, (imAuthenticationDisabled or('vimAuthenticationAWSCloudTrail'                     in (DisabledParsers) )))\n  , vimAuthenticationOktaSSO                        (starttime, endtime, targetusername_has, (imAuthenticationDisabled or('vimAuthenticationOktaSSO'                           in (DisabledParsers) )))\n  , vimAuthenticationM365Defender                   (starttime, endtime, targetusername_has, (imAuthenticationDisabled or('vimAuthenticationM365Defender'                      in (DisabledParsers) )))\n  , vimAuthenticationMicrosoftWindowsEvent          (starttime, endtime, targetusername_has, (imAuthenticationDisabled or('vimAuthenticationMicrosoftWindowsEvent'             in (DisabledParsers) )))\n  , vimAuthenticationMD4IoT                         (starttime, endtime, targetusername_has, (imAuthenticationDisabled or('vimAuthenticationMD4IoT'                            in (DisabledParsers) )))\n   };\nGeneric(starttime, endtime, targetusername_has)\n",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string='*'"
          }
        }
      ]
    }
  ]
}