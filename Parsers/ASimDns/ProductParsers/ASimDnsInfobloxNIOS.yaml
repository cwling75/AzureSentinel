Parser:
  Title: DNS activity ASIM parser for Infoblox NIOS
  Version: '0.2'
  LastUpdated: Nov 11 2021
Product:
  Name: Infoblox NIOS
Normalization:
  Schema: Dns
  Version: '0.1.3'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Infoblox NIOS DNS logs to the ASIM DNS activity normalized schema.
ParserName: ASimDnsInfobloxNIOS
EquivalentBuiltInParser: _ASim_Dns_InfobloxNIOS
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let Sources_by_SourceType=(sourcetype:string){_GetWatchlist('ASimSourceType') | where SearchKey == tostring(sourcetype) | extend Source=column_ifexists('Source','') | where isnotempty(Source)| distinct Source };
  let Infoblox=(disabled:bool=false){
    let RawData = Syslog | where not(disabled) | where ProcessName == "named" and SyslogMessage has "client"
      | where Computer in (Sources_by_SourceType('InfobloxNIOS'))
      | extend Parser = extract_all(@"^(\d{2}\-[a-zA-Z]{3}\-\d{4}\s[0-9\.\:]+)?\s?([a-zA-Z-_]+)(\s|\:)?(.*)", dynamic([1,2,3,4]), SyslogMessage)[0]
      | extend ResponseTime = todatetime(Parser[0]),
               Log_Type = tostring(Parser[1]),
               RawData_subString = tostring(Parser[3])
      | where Log_Type == "client"
      | project-away Parser;
    RawData 
    | extend dnsdata=tostring(extract_all(@"^(\d{2}\-[a-zA-Z]{3}\-\d{4}\s[0-9\.\:]+)?\s?([a-zA-Z-_]+)(\s|\:)?(.*)", dynamic([1,2,3,4]), SyslogMessage)[0][3])
    | extend EventSubType=iff(dnsdata has "response:", "response", "request")
    | extend dnsclient=iff(EventSubType=="response"
                //<client ip>#port <UDP or TCP>: [view: DNS view] query: <queried domain name> <class name> <type name> response: <rcode> <flags> [<RR in text format>; [<RR in text format>;] ...]
                , extract_all(@"^(\@[a-z0-9]+\s)?([0-9\.]+)\#(\d+):? (UDP|TCP):? (view: DNS view)?query: (\S+) ([A-Z]+) (\S+) response:? ([A-Z]+) (\S+)(([^;]+;\s*)*)",dnsdata)[0]
                //<client IP>#<port> query: <query_Domain name> <class name> <type name> <- or +>[SETDC] <(name server ip)>
                , extract_all(@"^(\@[a-z0-9]+\s)?([0-9\.]+)\#(\d+):? query: (\S+) (\S+) (\S+) ([+-]) \(([0-9.]+)\)",dnsdata)[0])
    | project-away SyslogMessage
    | extend
    // ******************* Mandatory
         EventCount=int(1),
         EventStartTime=todatetime(TimeGenerated),
         EventProduct="Infoblox DNS",
         EventVendor="Infoblox",
         EventSchema="Dns",
         EventSchemaVersion="0.1.3",
         EventType="Query", 
        EventResult=iff(EventSubType=="request" or tostring(dnsclient[8])=="NOERROR","Success","Failure"),
         EventResultDetails=iff (EventSubType=="response",tostring(dnsclient[8]),""),
         // TimeGenerated, // not handled by schema, but we need to preserve it
         SrcIpAddr = tostring(dnsclient[1]),
         EventSubType=iff(dnsclient has "response:", "response","request"), 
        // 
        SrcPortNumber = toint(dnsclient[2]),
        NetworkProtocol = iff (EventSubType=="response", tostring(dnsclient[3]),""),        
        DnsQuery = iff (EventSubType=="response",tostring(dnsclient[5]), tostring(dnsclient[3])),
        DnsQueryClassName = iff (EventSubType=="response",tostring(dnsclient[6]),tostring(dnsclient[4])),
        DnsQueryTypeName = iff (EventSubType=="response",tostring(dnsclient[7]),tostring(dnsclient[5])),
        DnsResponseCodeName = iff (EventSubType=="response",tostring(dnsclient[8]),""),
        DnsFlags =iff (EventSubType=="response", tostring(dnsclient[9]),tostring(dnsclient[6])),
        // 
        DnsResponseName = iff (EventSubType=="response",tostring(dnsclient[-2]),""),
        DstIpAddr=iff(EventSubType=="response","",dnsclient[-1])
   | project-rename
       // * Added in version 0.1.1
         DvcHostname=Computer
         , DvcIpAddr=HostIP
       // *
       // **************Aliases
    | extend
      Dvc=DvcHostname,
      Domain=DnsQuery,
      IpAddr=SrcIpAddr,
      Src=SrcIpAddr,
      Dst=DstIpAddr,
    // Backward Compatibility
      Query=DnsQuery
      , QueryTypeName=DnsQueryTypeName
      , ResponseCodeName=DnsResponseCodeName
      , QueryClassName=DnsQueryClassName
      , Flags=DnsFlags
    };
    Infoblox(disabled)