Parser:
  Title: DNS activity ASIM parser for Corelight Zeek
  Version: '0.2'
  LastUpdated: Nov 11 2021
Product:
  Name: Corelight Zeek
Normalization:
  Schema: Dns
  Version: '0.1.3'
References:
- Title: ASIM DNS Schema
  Link: https://aka.ms/ASimDnsDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Corelight Zeek DNS logs to the ASIM DNS activity normalized schema.
ParserName: ASimDnsCorelightZeek
EquivalentBuiltInParser: _ASim_Dns_CorelightZeek
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let DNSQuery_CorelightZeek=(disabled:bool=false){
    Corelight_CL | where not(disabled)
    | where log_file_s has "dns"
    | extend data = todynamic(Message)
    | extend 
        EventCount=int(1),
        EventProduct="Zeek",
        EventVendor="Corelight",
        EventSchema = "Dns",
        EventSchemaVersion="0.1.3",
        Dvc="Zeek",
        EventType="Query",
        EventSubType='response',
        EventEndTime= todatetime(data.ts),
        EventOriginalUid = tostring(data.uid),
        SrcIpAddr = tostring (data.["id.orig_h"]),
        SrcPortNumber = toint (data.["id.orig_p"]),
        DstIpAddr = tostring (data.["id.dest_h"]),
        DstPortNumber = toint (data.["id.dest_p"]),
        NetworkProtocol = tostring(data.proto),
        TransactionIdHex = tohex(toint(data.trans_id)), 
        DnsQuery = tostring(data.query),
        DnsResponseCode = toint(data.rcode),
        EventResultDetails = tostring (data.rcode_name),
        DnsFlagsAuthoritative = tobool(data.AA),
        DnsFlagsTruncated = tobool(data.TC),
        DnsFlagsRecursionDesired = tobool(data.RD),
        DnsFlagsZ = tobool(data.Z),
        DnsQueryClassName =tostring(data.qclass_name), 
        DnsQueryClass = toint(data.qclass),
        DnsQueryTypeName =tostring(data.qtype_name), 
        DnsQueryType = toint(data.qtype),
        DnsNetworkDuration = toint(data.rtt),
        DnsResponseName = tostring(pack ('answers', data.answers, 'ttls', data.TTLs, 'authoritative ', data.auth, 'additional', data.addl))
    | extend
        EventStartTime = EventEndTime,
        EventResult = iff (EventResultDetails=~'NOERROR','Success','Failure')
    // Aliases
    | extend 
        DnsResponseCodeName=EventResultDetails, 
        Domain=DnsQuery,
        IpAddr=SrcIpAddr,
        Src=SrcIpAddr,
        Dst=DstIpAddr,
        Duration=DnsNetworkDuration
    // Backward Compatibility
    | extend
        Query=DnsQuery,
        QueryType=DnsQueryType,
        ResponseCodeName=DnsResponseCodeName,
        QueryTypeName=DnsQueryTypeName
    };
    DNSQuery_CorelightZeek(disabled)
